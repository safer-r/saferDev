[{"path":"/articles/arg_check.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"arg_check","text":"","code":"vec1 <- -1:3 # vector of integers vec2 <- 1:3 / 3 # vector of proportions vec3 <- c(1, 2, 3) # vector of integers but stored as \"double\" vec4 <- \"pearson\" # vector of characters vec5 <- c(\"a\", \"b\",\"a\", \"b\") # vector of characters mat1 <- matrix(vec1) # matrix of integers mat2 <- matrix(c(1:3 / 3, NA)) # matrix of proportions with NA"},{"path":"/articles/arg_check.html","id":"datasets-info","dir":"Articles","previous_headings":"","what":"Datasets info","title":"arg_check","text":"","code":"vec1 # vector of integers > [1] -1  0  1  2  3 vec2 # vector of proportions > [1] 0.3333333 0.6666667 1.0000000 vec3 # vector of integers but stored as \"double\" > [1] 1 2 3 vec4 # vector of characters > [1] \"pearson\" vec5 # vector of characters > [1] \"a\" \"b\" \"a\" \"b\" mat1 # matrix of integers >      [,1] > [1,]   -1 > [2,]    0 > [3,]    1 > [4,]    2 > [5,]    3 mat2 # matrix of proportions with NA >           [,1] > [1,] 0.3333333 > [2,] 0.6666667 > [3,] 1.0000000 > [4,]        NA"},{"path":"/articles/arg_check.html","id":"simple-examples","dir":"Articles","previous_headings":"","what":"Simple examples","title":"arg_check","text":"","code":"# Check that vec1 is of class integer (means that it is also a vector) -> ok arg_check(data = vec1, class = \"integer\") > $problem > [1] FALSE >  > $text > [1] \"NO PROBLEM DETECTED FOR THE vec1 OBJECT\" >  > $object.name > [1] \"vec1\" # Check that vec1 is a numeric vector -> error because vec1 is a vector of integers arg_check(data = vec1, class = \"numeric\") > $problem > [1] TRUE >  > $text > [1] \"ERROR: THE vec1 OBJECT MUST BE CLASS numeric\" >  > $object.name > [1] \"vec1\" # Check that vec1 is an integer vector of length 3 without negative values and without NA -> error because of length 5 and negative values inside vec1 arg_check(data = vec1, class = \"vector\", typeof = \"integer\", length = 3, neg.values = FALSE, na.contain = FALSE) > $problem > [1] TRUE >  > $text > [1] \"ERROR: THE vec1 OBJECT MUST BE LENGTH 3 AND THE vec1 OBJECT MUST BE MADE OF NON NEGATIVE NUMERIC VALUES\" >  > $object.name > [1] \"vec1\" # No result displayed because the output list is assigned into res (see below the print argument) res <- arg_check(data = vec1, class = \"integer\")  # with data = NULL, the function systematically report a checking problem arg_check(data = NULL, class = \"integer\") > $problem > [1] TRUE >  > $text > [1] \"ERROR: THE NULL OBJECT MUST BE CLASS integer\" >  > $object.name > [1] \"NULL\""},{"path":"/articles/arg_check.html","id":"argument-class-typeof-mode-and-length-are-the-same-as-the-corresponding-r-function-except-class-which","dir":"Articles","previous_headings":"","what":"Argument class, typeof, mode and length are the same as the corresponding R function, except class which","title":"arg_check","text":"also “vector” remains “matrix” matrices “matrix” “array”","code":"# Example arg_check(data = vec1,      class = \"vector\",      typeof = \"integer\",      mode = \"numeric\",      length = 5,  ) > $problem > [1] FALSE >  > $text > [1] \"NO PROBLEM DETECTED FOR THE vec1 OBJECT\" >  > $object.name > [1] \"vec1\" # Warning: the function does not check for inconsistencies between arguments. It just checks if everything is ok between arguments values and data arg_check(data = vec1,      typeof = \"integer\",      mode = \"character\", # the mode \"character\" exists but is inconsistant with typeof \"integer\". However, this aspect is not signaled by the function ) > $problem > [1] TRUE >  > $text > [1] \"ERROR: THE vec1 OBJECT MUST BE MODE character\" >  > $object.name > [1] \"vec1\"  # Error message due to wrong value in the class and length arguments arg_check(data = vec1,      mode = \"integer\", # the mode \"integer\" does not exist in the mode() function of R ) > Error:  >  > ================ >  > ERROR IN arg_check() OF THE saferDev PACKAGE: mode ARGUMENT MUST BE ONE OF THESE VALUE: > \"logical\", \"numeric\", \"complex\", \"character\", \"list\", \"expression\", \"name\", \"symbol\", \"function\", \"environment\", \"S4\", \"call\" >  > ================"},{"path":"/articles/arg_check.html","id":"argument-prop","dir":"Articles","previous_headings":"","what":"Argument prop","title":"arg_check","text":"","code":"arg_check(data = mat2,      prop = TRUE # Check for values between 0 and 1 only ) > $problem > [1] TRUE >  > $text > [1] \"ERROR: THE mat2 OBJECT CONTAINS NA WHILE NOT AUTHORIZED\" >  > $object.name > [1] \"mat2\""},{"path":"/articles/arg_check.html","id":"argument-double-as-integer-allowed","dir":"Articles","previous_headings":"","what":"Argument double.as.integer.allowed","title":"arg_check","text":"","code":"arg_check(data = vec3, typeof = \"integer\",     double.as.integer.allowed = TRUE # with TRUE, integers stored as double are accepted ) > $problem > [1] FALSE >  > $text > [1] \"NO PROBLEM DETECTED FOR THE vec3 OBJECT\" >  > $object.name > [1] \"vec3\""},{"path":"/articles/arg_check.html","id":"argument-options","dir":"Articles","previous_headings":"","what":"Argument options","title":"arg_check","text":"","code":"arg_check(data = vec4,      options = c(\"pearson\", \"spearman\", \"kendall\") ) > $problem > [1] FALSE >  > $text > [1] \"NO PROBLEM DETECTED FOR THE vec4 OBJECT\" >  > $object.name > [1] \"vec4\""},{"path":"/articles/arg_check.html","id":"argument-all-options-in-data","dir":"Articles","previous_headings":"","what":"Argument all.options.in.data","title":"arg_check","text":"","code":"# No error arg_check(data = vec5,     options = c(\"a\", \"b\"),      all.options.in.data = TRUE ) > $problem > [1] FALSE >  > $text > [1] \"NO PROBLEM DETECTED FOR THE vec5 OBJECT\" >  > $object.name > [1] \"vec5\" # No error arg_check(data = vec5,     options = c(\"a\", \"b\", \"c\"),      all.options.in.data = FALSE ) > $problem > [1] FALSE >  > $text > [1] \"NO PROBLEM DETECTED FOR THE vec5 OBJECT\" >  > $object.name > [1] \"vec5\" # Error arg_check(data = vec5,     options = c(\"a\", \"b\", \"c\"),      all.options.in.data = TRUE ) > $problem > [1] TRUE >  > $text > [1] \"ERROR: THE vec5 OBJECT MUST BE MADE OF ALL THESE OPTIONS: a b c\\nTHE MISSING ELEMENTS OF THE options ARGUMENT ARE: c\" >  > $object.name > [1] \"vec5\""},{"path":"/articles/arg_check.html","id":"argument-na-contain","dir":"Articles","previous_headings":"","what":"Argument na.contain","title":"arg_check","text":"","code":"arg_check(data = mat2, class = \"matrix\", prop = TRUE,     na.contain = FALSE # with TRUE, integers stored as double are accepted ) > $problem > [1] TRUE >  > $text > [1] \"ERROR: THE mat2 OBJECT CONTAINS NA WHILE NOT AUTHORIZED\" >  > $object.name > [1] \"mat2\""},{"path":"/articles/arg_check.html","id":"argument-neg-values","dir":"Articles","previous_headings":"","what":"Argument neg.values","title":"arg_check","text":"","code":"# Warning: only considered if set to FALSE, to check for non negative values when class is set to \"vector\", \"numeric\", \"matrix\", \"array\", \"data.frame\", \"table\", or typeof is set to \"double\", \"integer\", or mode is set to \"numeric\" arg_check(data = mat1, class = \"matrix\",     neg.values = FALSE # with TRUE, integers stored as double are accepted ) > $problem > [1] TRUE >  > $text > [1] \"ERROR: THE mat1 OBJECT MUST BE MADE OF NON NEGATIVE NUMERIC VALUES\" >  > $object.name > [1] \"mat1\""},{"path":"/articles/arg_check.html","id":"argument-inf-values","dir":"Articles","previous_headings":"","what":"Argument inf.values","title":"arg_check","text":"","code":"# Warning: only considered if set to FALSE, to check for non infinite values when class is set to \"vector\", \"numeric\", \"matrix\", \"array\", \"data.frame\", \"table\", or typeof is set to \"double\", \"integer\", or mode is set to \"numeric\" arg_check(data = mat1, class = \"matrix\",     inf.values = FALSE ) > $problem > [1] TRUE >  > $text > [1] \"ERROR: THE mat1 OBJECT MUST BE MADE OF NON INFINITE VALUES BUT IS NOT EVEN TYPE DOUBLE\" >  > $object.name > [1] \"mat1\""},{"path":"/articles/arg_check.html","id":"argument-print","dir":"Articles","previous_headings":"","what":"Argument print","title":"arg_check","text":"","code":"# No error message printed because print is FALSE res <- arg_check(data = mat1, class = \"data.frame\",     print = FALSE ) # Error message printed res <- arg_check(data = mat1, class = \"data.frame\",     print = TRUE ) >  >  > ================ >  > ERROR: THE mat1 OBJECT MUST BE CLASS data.frame >  > ================ # Even if print is TRUE, no error message printed because no error res <- arg_check(data = mat1, class = \"matrix\",     print = TRUE )"},{"path":"/articles/arg_check.html","id":"arguments-data-name-and-fun-name","dir":"Articles","previous_headings":"","what":"Arguments data.name and fun.name","title":"arg_check","text":"","code":"# Example tempo <- arg_check(data = vec1, class = \"integer\",      data.name = \"OBSERVATION_1\",      fun.name = \"FUNCTION_1\" ) tempo$text > [1] \"IN FUNCTION_1: NO PROBLEM DETECTED FOR THE OBSERVATION_1 OBJECT\" # In fact, these two arguments are interesting when check() is used inside functions fun1 <- function(arg1){     tempo <- arg_check(data = arg1, class = \"integer\",          data.name = NULL, # if NULL, the name displayed is arg1         fun.name = NULL # if NULL, no name displayed     )     if(tempo$problem == TRUE){         cat(paste0(\"\\n\\n================\\n\\n\", tempo$text, \"\\n\\n================\\n\\n\"))     } } fun1(arg1 = vec4) # error message because arg1 requires a vector of integers >  >  > ================ >  > ERROR: THE arg1 OBJECT MUST BE CLASS integer >  > ================"},{"path":"/articles/arg_check.html","id":"all-the-arguments","dir":"Articles","previous_headings":"","what":"All the arguments","title":"arg_check","text":"","code":"# See the examples of fun_info() to test different classes of objects arg_check(     data = vec1,      class = \"integer\",      typeof = NULL,      mode = NULL,      length = NULL,      prop = FALSE,      double.as.integer.allowed = FALSE,      options = NULL,      all.options.in.data = FALSE,      na.contain = FALSE,      neg.values = TRUE,      inf.values = TRUE,      print = FALSE,      data.name = NULL,      fun.name = NULL ) > $problem > [1] FALSE >  > $text > [1] \"NO PROBLEM DETECTED FOR THE vec1 OBJECT\" >  > $object.name > [1] \"vec1\""},{"path":"/articles/arg_test.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"arg_test","text":"","code":"f <- \"unique\" argum <- c(\"x\", \"incomparables\") value <- list(x = list(1:10, c(1,1,2,8), NA), incomparable = c(TRUE, FALSE, NA)) error <- list(x = list(FALSE, FALSE, TRUE), incomparable = c(FALSE, FALSE, TRUE))"},{"path":"/articles/arg_test.html","id":"datasets-info","dir":"Articles","previous_headings":"","what":"Datasets info","title":"arg_test","text":"","code":"f # character string indicating the name of the function tested  > [1] \"unique\" argum # character vector of the arguments of fun > [1] \"x\"             \"incomparables\" value # List in which each compartment containing values of the corresponding argument in arg > $x > $x[[1]] >  [1]  1  2  3  4  5  6  7  8  9 10 >  > $x[[2]] > [1] 1 1 2 8 >  > $x[[3]] > [1] NA >  >  > $incomparable > [1]  TRUE FALSE    NA error # List indicating if an error is expected > $x > $x[[1]] > [1] FALSE >  > $x[[2]] > [1] FALSE >  > $x[[3]] > [1] TRUE >  >  > $incomparable > [1] FALSE FALSE  TRUE"},{"path":"/articles/arg_test.html","id":"simple-examples","dir":"Articles","previous_headings":"","what":"Simple examples","title":"arg_test","text":"","code":"arg_test(     fun = f,      arg = argum,      val = value ) >  > test JOB IGNITION >  > THE TOTAL NUMBER OF TESTS IS: 9 >  > LOOP PROCESS ENDED | LOOP 9 / 9 | TIME SPENT: 52S > $fun > [1] \"unique\" >  > $ini > arg_test(fun = f, arg = argum, val = value) >  > $data >                               x incomparables kind problem message > arg_test_1 1 2 3 4 5 6 7 8 9 10          TRUE   OK   FALSE         > arg_test_2 1 2 3 4 5 6 7 8 9 10         FALSE   OK   FALSE         > arg_test_3 1 2 3 4 5 6 7 8 9 10            NA   OK   FALSE         > arg_test_4              1 1 2 8          TRUE   OK   FALSE         > arg_test_5              1 1 2 8         FALSE   OK   FALSE         > arg_test_6              1 1 2 8            NA   OK   FALSE         > arg_test_7                   NA          TRUE   OK   FALSE         > arg_test_8                   NA         FALSE   OK   FALSE         > arg_test_9                   NA            NA   OK   FALSE         >  > $sys.info > R version 4.3.1 (2023-06-16 ucrt) > Platform: x86_64-w64-mingw32/x64 (64-bit) > Running under: Windows 10 x64 (build 19045) >  > Matrix products: default >  >  > locale: > [1] LC_COLLATE=French_France.utf8  LC_CTYPE=French_France.utf8    > [3] LC_MONETARY=French_France.utf8 LC_NUMERIC=C                   > [5] LC_TIME=French_France.utf8     >  > time zone: Europe/Paris > tzcode source: internal >  > attached base packages: > [1] stats     graphics  grDevices utils     datasets  methods   base      >  > other attached packages: > [1] saferDev_1.0 >  > loaded via a namespace (and not attached): >  [1] askpass_1.1       bslib_0.5.1       cachem_1.0.8      cli_3.6.1         >  [5] colorspace_2.1-0  compiler_4.3.1    desc_1.4.2        digest_0.6.33     >  [9] dplyr_1.1.3       evaluate_0.22     fansi_1.0.4       fastmap_1.1.1     > [13] fs_1.6.3          generics_0.1.3    ggplot2_3.4.4     glue_1.6.2        > [17] grid_4.3.1        gtable_0.3.4      htmltools_0.5.7   jquerylib_0.1.4   > [21] jsonlite_1.8.7    knitr_1.44        lattice_0.21-8    lifecycle_1.0.4   > [25] lubridate_1.9.2   magrittr_2.0.3    Matrix_1.5-4.1    memoise_2.0.1     > [29] munsell_0.5.0     parallel_4.3.1    pdftools_3.3.3    pillar_1.9.0      > [33] pkgconfig_2.0.3   pkgdown_2.0.7     png_0.1-8         purrr_1.0.2       > [37] qpdf_1.3.2        R6_2.5.1          ragg_1.2.5        Rcpp_1.0.11       > [41] reticulate_1.32.0 rlang_1.1.2       rmarkdown_2.25    rprojroot_2.0.3   > [45] rstudioapi_0.15.0 sass_0.4.7        scales_1.2.1      stringi_1.7.12    > [49] stringr_1.5.0     systemfonts_1.0.4 textshaping_0.3.6 tibble_3.2.1      > [53] tidyselect_1.2.0  timechange_0.2.0  tools_4.3.1       utf8_1.2.3        > [57] vctrs_0.6.5       xfun_0.40         yaml_2.3.7"},{"path":"/articles/arg_test.html","id":"all-the-arguments","dir":"Articles","previous_headings":"","what":"All the arguments","title":"arg_test","text":"","code":"arg_test(     fun = f,      arg = argum,      val= value,      expect.error = error,      parall = FALSE,      thread.nb = NULL,      print.count = 10,      plot.fun = FALSE,      export = TRUE,      res.path = \".\",      lib.path = NULL ) # check the function \"mean\" in the environment one step above the local environment >  > test JOB IGNITION >  > THE TOTAL NUMBER OF TESTS IS: 9 >  > LOOP PROCESS ENDED | LOOP 9 / 9 | TIME SPENT: 52S >  > DISCREPANCIES BETWEEN EXPECTED AND OBSERVED ERRORS (SEE THE discrepancy_table_from_arg_test_1-9.tsv FILE) >  > test JOB END >  > TIME: 2024-01-29 16:19:35.3553 >  > TOTAL TIME LAPSE: 52S"},{"path":"/articles/env_check.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"env_check","text":"","code":"pos <- 2 name <- \"mean\""},{"path":"/articles/env_check.html","id":"datasets-info","dir":"Articles","previous_headings":"","what":"Datasets info","title":"env_check","text":"","code":"pos # integer indicating the position of the environment checked > [1] 2 name # character vector of the name of the function that will be checked > [1] \"mean\""},{"path":"/articles/env_check.html","id":"simple-example","dir":"Articles","previous_headings":"","what":"Simple example","title":"env_check","text":"","code":"env_check(pos = 1) > NULL env_check(pos = 2) > NULL"},{"path":"/articles/env_check.html","id":"argument-pos","dir":"Articles","previous_headings":"","what":"Argument pos","title":"env_check","text":"","code":"env_check(pos = 1) # check the object \"NULL\" in the environment one step above the env_check() environment > NULL"},{"path":"/articles/env_check.html","id":"argument-name","dir":"Articles","previous_headings":"","what":"Argument name","title":"env_check","text":"","code":"env_check(name = \"mean\") # check if the object \"mean\" is in the environment one step above the env_check() environment, and if yes, returns if the same name exists in above environments > NULL"},{"path":"/articles/env_check.html","id":"all-the-arguments","dir":"Articles","previous_headings":"","what":"All the arguments","title":"env_check","text":"","code":"mean <- 2 env_check(     pos = 1,     name = \"mean\" ) # check if the object \"mean\" is in the environment one step above the env_check() environment, and if yes, returns if the same name exists in above environments > [1] \"SOME VARIABLES OF mean ARE ALSO PRESENT IN :\\npackage:base: mean\\n\""},{"path":[]},{"path":[]},{"path":"/articles/get_message.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"get_message","text":"","code":"char1 <- \"wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)\" # single character string char2 <- \"message('ahah')\" # single character string"},{"path":"/articles/get_message.html","id":"datasets-info","dir":"Articles","previous_headings":"","what":"Datasets info","title":"get_message","text":"","code":"char1 # single character string > [1] \"wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)\" char2 # single character string > [1] \"message('ahah')\""},{"path":"/articles/get_message.html","id":"simple-example","dir":"Articles","previous_headings":"","what":"Simple example","title":"get_message","text":"","code":"get_message(data = char1) > NULL get_message(data = char2) > ahah > NULL"},{"path":"/articles/get_message.html","id":"argument-kind","dir":"Articles","previous_headings":"","what":"Argument kind","title":"get_message","text":"","code":"get_message(data = char1, kind = \"warning\") # to get warning messages of the wilcox test > [1] \"WARNING MESSAGE REPORTED:\\nsimpleWarning in wilcox.test.default(c(1, 1, 3), c(1, 2, 4), paired = TRUE): cannot compute exact p-value with zeroes\\n\""},{"path":"/articles/get_message.html","id":"argument-header","dir":"Articles","previous_headings":"","what":"Argument header","title":"get_message","text":"","code":"get_message(data = char1, header = FALSE) # to get error messages (by default) without header > NULL"},{"path":"/articles/get_message.html","id":"argument-print-no","dir":"Articles","previous_headings":"","what":"Argument print.no","title":"get_message","text":"","code":"get_message(data = char1, print.no = TRUE) # print a message saying that no message reported > [1] \"NO ERROR MESSAGE REPORTED\""},{"path":"/articles/get_message.html","id":"argument-text","dir":"Articles","previous_headings":"","what":"Argument text","title":"get_message","text":"","code":"get_message(data = char2, print.no = TRUE, text = \"IN A\") # print a message even if the argument print.no is TRUE > [1] \"NO ERROR MESSAGE REPORTED IN A\""},{"path":"/articles/get_message.html","id":"argument-kind-header-print-no-text","dir":"Articles","previous_headings":"","what":"Argument kind, header, print.no, text","title":"get_message","text":"","code":"get_message(data = char1, kind = \"warning\", header = FALSE, print.no = TRUE, text = \"IN A\") # print the warning message in text > [1] \"simpleWarning in wilcox.test.default(c(1, 1, 3), c(1, 2, 4), paired = TRUE): cannot compute exact p-value with zeroes\\n\""},{"path":"/articles/get_message.html","id":"all-the-arguments","dir":"Articles","previous_headings":"","what":"All the arguments","title":"get_message","text":"","code":"get_message(     data = char1,      kind = \"warning\",      header = FALSE,     print.no = TRUE,      text = \"IN A\",     env = NULL ) # print the warning message in text in the environment R_GlobalEnv > [1] \"simpleWarning in wilcox.test.default(c(1, 1, 3), c(1, 2, 4), paired = TRUE): cannot compute exact p-value with zeroes\\n\""},{"path":"/articles/is_function_here.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"is_function_here","text":"","code":"f <- \"ggplot2::geom_point\" path <- \"blablabla\""},{"path":"/articles/is_function_here.html","id":"datasets-info","dir":"Articles","previous_headings":"","what":"Datasets info","title":"is_function_here","text":"","code":"f # Character vector of function name > [1] \"ggplot2::geom_point\" path # character vector specifying the absolute pathways of the directories, this lib.path will return an error > [1] \"blablabla\""},{"path":"/articles/is_function_here.html","id":"argument-fun","dir":"Articles","previous_headings":"","what":"Argument fun","title":"is_function_here","text":"","code":"is_function_here(fun = f) # check if the package serpentine is in the computer"},{"path":"/articles/is_function_here.html","id":"argument-lib-path","dir":"Articles","previous_headings":"","what":"Argument lib.path","title":"is_function_here","text":"","code":"is_function_here(     fun = f,     lib.path = \".\"     ) # check if the function is present in the package"},{"path":"/articles/is_function_here.html","id":"all-the-arguments","dir":"Articles","previous_headings":"","what":"All the arguments","title":"is_function_here","text":"```","code":"is_function_here(     fun = f,     lib.path = path     ) # check if the function is present in the package, returns an error because the path doesn't exist > Error:  >  > ================ >  > ERROR IN is_function_here() OF THE saferDev PACKAGE: DIRECTORY PATH INDICATED IN THE lib.path ARGUMENT DOES NOT EXISTS: > blablabla >  > ================"},{"path":"/articles/is_package_here.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"is_package_here","text":"","code":"req.pkg <- \"ggplot2\" path <- \"blablabla\""},{"path":"/articles/is_package_here.html","id":"datasets-info","dir":"Articles","previous_headings":"","what":"Datasets info","title":"is_package_here","text":"","code":"req.pkg # Character vector of package names > [1] \"ggplot2\" path # character vector specifying the absolute pathways of the directories, this lib.path will return an error > [1] \"blablabla\""},{"path":"/articles/is_package_here.html","id":"argument-req-package","dir":"Articles","previous_headings":"","what":"Argument req.package","title":"is_package_here","text":"","code":"is_package_here(req.package = req.pkg) # check if the package serpentine is in the computer"},{"path":"/articles/is_package_here.html","id":"argument-lib-path","dir":"Articles","previous_headings":"","what":"Argument lib.path","title":"is_package_here","text":"","code":"is_package_here(     req.package = req.pkg,     lib.path = \".\"     ) # check if the package is in the computer"},{"path":"/articles/is_package_here.html","id":"all-the-arguments","dir":"Articles","previous_headings":"","what":"All the arguments","title":"is_package_here","text":"```","code":"is_package_here(     req.package = req.pkg,     lib.path = path     ) # check if the package is in the computer > Error:  >  > ================ >  > ERROR IN is_package_here() OF THE saferDev PACKAGE: DIRECTORY PATH INDICATED IN THE lib.path ARGUMENT DOES NOT EXISTS: > blablabla >  > ================"},{"path":"/articles/is_python_package_here.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"is_python_package_here","text":"","code":"req.pkg <- \"serpentine\" path <- \"blablabla\""},{"path":"/articles/is_python_package_here.html","id":"datasets-info","dir":"Articles","previous_headings":"","what":"Datasets info","title":"is_python_package_here","text":"","code":"req.pkg # Character vector of package names to import > [1] \"serpentine\" path # character vector specifying the absolute pathways of the directories, this lib.path will return an error > [1] \"blablabla\""},{"path":"/articles/is_python_package_here.html","id":"argument-req-package","dir":"Articles","previous_headings":"","what":"Argument req.package","title":"is_python_package_here","text":"","code":"is_python_package_here(req.package = req.pkg) # check if the package serpentine is in the computer > Warning in system2(command = python, args = shQuote(script), stdout = TRUE, : > running command > '\"C:/Users/yhan/AppData/Local/Programs/Python/Python312/python.exe\" > \"C:/Users/yhan/AppData/Local/R/win-library/4.3/reticulate/config/config.py\"' > had status 1 > Error in python_config_impl(python) :  >   Error 1 occurred running C:/Users/yhan/AppData/Local/Programs/Python/Python312/python.exe: > Warning in system2(command = python, args = shQuote(script), stdout = TRUE, : > running command > '\"C:/Users/yhan/AppData/Local/Programs/Python/Python312/python.exe\" > \"C:/Users/yhan/AppData/Local/R/win-library/4.3/reticulate/config/config.py\"' > had status 1 > Error in python_config_impl(python) :  >   Error 1 occurred running C:/Users/yhan/AppData/Local/Programs/Python/Python312/python.exe: > Error in config$architecture: $ operator is invalid for atomic vectors"},{"path":"/articles/is_python_package_here.html","id":"argument-lib-path","dir":"Articles","previous_headings":"","what":"Argument lib.path","title":"is_python_package_here","text":"","code":"is_python_package_here(     req.package = req.pkg,     lib.path = path     ) # check if the package is in the computer > Error:  >  > ================ >  > ERROR IN is_python_package_here() OF THE saferDev PACKAGE: DIRECTORY PATH INDICATED IN THE lib.path ARGUMENT DOES NOT EXISTS: > blablabla >  > ================"},{"path":"/articles/is_python_package_here.html","id":"all-the-arguments","dir":"Articles","previous_headings":"","what":"All the arguments","title":"is_python_package_here","text":"","code":"is_python_package_here(     req.package = \"serpentine\",      python.exec.path = \".\",      python.lib.path = \".\",     lib.path = \".\" ) # check if the python package serpentine is present in the computer, returns an error if the package is not in the computer > Error:  >  > ================ >  > ERROR IN is_python_package_here() OF THE saferDev PACKAGE. REQUIRED PACKAGES: > reticulate > reticulate > reticulate > MUST BE INSTALLED IN ONE OF THESE FOLDERS: > C:/Users/yhan/Documents/Git_projects/saferDev/vignettes/articles > C:/Program Files/R/R-4.3.1/library >  > ================"},{"path":"/articles/report.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"report","text":"","code":"vec1 <- 1:6 # vector of integers vec2 <- c(\"(\",\"a\",\")\",\"(\",\"b\",\")\",\"(\",\"c\",\")\") # vector of characters mat1 <- matrix(vec1, nrow = 2, ncol = 3, byrow = TRUE) # matrix of integer having 2 rows and 3 columns rownames(mat1) <- c(\"Row 1\",\"Row 2\") mat2 <- matrix(vec2, nrow = 3, ncol = 3, byrow = TRUE) # matrix of integer having 3 rows and 3 columns rownames(mat2) <- c(\"R1\",\"R2\",\"R3\")"},{"path":"/articles/report.html","id":"datasets-info","dir":"Articles","previous_headings":"","what":"Datasets info","title":"report","text":"","code":"vec1 # vector of integers > [1] 1 2 3 4 5 6 vec2 # vector of characters > [1] \"(\" \"a\" \")\" \"(\" \"b\" \")\" \"(\" \"c\" \")\" mat1 # matrix of integers with the row names >       [,1] [,2] [,3] > Row 1    1    2    3 > Row 2    4    5    6 mat2 # matrix of characters with the row names >    [,1] [,2] [,3] > R1 \"(\"  \"a\"  \")\"  > R2 \"(\"  \"b\"  \")\"  > R3 \"(\"  \"c\"  \")\""},{"path":"/articles/report.html","id":"simple-examples","dir":"Articles","previous_headings":"","what":"Simple examples","title":"report","text":"","code":"report(data = vec1, path = \".\") # print the vector vec1 into the output file in the path report(data = vec2, path = \".\") # print the vector vec2 into the output file in the path report(data = mat1, path = \".\") # print the matrix mat1 into the output file in the path report(data = mat2, path = \".\") # print the matrix mat2 into the output file in the path"},{"path":"/articles/report.html","id":"argument-output","dir":"Articles","previous_headings":"","what":"Argument output","title":"report","text":"","code":"report(data = vec1, output = \"test.txt\", path = \".\") # print the vector vec1 into the output file named \"test.txt\" in the path"},{"path":"/articles/report.html","id":"argument-overwrite","dir":"Articles","previous_headings":"","what":"Argument overwrite","title":"report","text":"","code":"report(data = vec2, overwrite = TRUE, path = \".\") # if the file exists, the output file content will be erased before printing"},{"path":"/articles/report.html","id":"argument-rownames-kept","dir":"Articles","previous_headings":"","what":"Argument rownames.kept","title":"report","text":"","code":"report(data = mat1, rownames.kept = TRUE, path = \".\") # keep the row names when print the matrix mat1 in the file"},{"path":"/articles/report.html","id":"argument-vector-cat","dir":"Articles","previous_headings":"","what":"Argument vector.cat","title":"report","text":"","code":"report(data = mat2, vector.cat = TRUE, path = \".\") # print a vector of length > 1 using cat() instead of capture.output()"},{"path":"/articles/report.html","id":"argument-noquote","dir":"Articles","previous_headings":"","what":"Argument noquote","title":"report","text":"","code":"report(data = mat2, noquote = FALSE, path = \".\") # quote are present for the characters."},{"path":"/articles/report.html","id":"argument-sep","dir":"Articles","previous_headings":"","what":"Argument sep","title":"report","text":"","code":"report(data = vec1, sep = 4, path = \".\") # 4 lines after printed data"},{"path":"/articles/report.html","id":"all-the-arguments","dir":"Articles","previous_headings":"","what":"All the arguments","title":"report","text":"","code":"report(     data = mat2,      output = \"test.txt\",      path = \".\",      overwrite = TRUE,      rownames.kept = TRUE,      vector.cat = TRUE,      noquote = FALSE,      sep = 4 ) # matrix mat2 will be print in the file \"text.txt\" in the path, with quote and row names being kept, and 4 lines after printing data"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yushi Han. Author. Gaël Millot. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Han Y, Millot G (2024). saferDev: Function pipeline development. R package version 1.0.","code":"@Manual{,   title = {saferDev: Function and pipeline development},   author = {Yushi Han and Gaël Millot},   year = {2024},   note = {R package version 1.0}, }"},{"path":[]},{"path":"/index.html","id":"table-of-content","dir":"","previous_headings":"","what":"Table of content","title":"Function and pipeline development","text":"Description Content Versions Installation Licence Citations Credits Acknowledgements","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Function and pipeline development","text":"Set R functions development R functions, written according safer project specifications.","code":""},{"path":"/index.html","id":"content","dir":"","previous_headings":"","what":"Content","title":"Function and pipeline development","text":"Read vignette(\"saferDev\") details.","code":""},{"path":"/index.html","id":"versions","dir":"","previous_headings":"","what":"Versions","title":"Function and pipeline development","text":"different saferDev releases tagged .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Function and pipeline development","text":"saferDev can currently installed GitHub: Older versions can installed like :","code":"install.packages(\"remotes\") remotes::install_github(\"https://github.com/safer-r/saferDev\") v <- \"v1.0\" # desired tag version remotes::install_github(paste0(\"https://github.com/safer-r/saferDev/tree/\", v))"},{"path":"/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"Function and pipeline development","text":"package can redistributed /modified terms GNU General Public License published Free Software Foundation, either version 3 License, (option) later version. Distributed hope useful, without warranty; without even implied warranty merchandability fitness particular purpose. See GNU General Public License details https://www.gnu.org/licenses.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Function and pipeline development","text":"using functions saferDev, please cite: Han Y, Serizay J, Millot GA (2023). R saferDev package. https://github.com/safer-r/saferDev/.","code":""},{"path":"/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Function and pipeline development","text":"Yushi Han, Bioinformatics Biostatistics Hub, Institut Pasteur, Paris, France Jacques Serizai, Spatial Regulation Genomes team, Institut Pasteur, Paris, France Gael . Millot, Bioinformatics Biostatistics Hub, Institut Pasteur, Paris, France","code":""},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Function and pipeline development","text":"developers & maintainers mentioned softwares packages, including: R Git Github","code":""},{"path":"/reference/arg_check.html","id":null,"dir":"Reference","previous_headings":"","what":"arg_check — arg_check","title":"arg_check — arg_check","text":"Check expected values argument functions: class, type, mode, length, restricted values panel, kind numeric values addition distinction 'integer' 'double' (proportion ? Inf values authorized? negative values authorized? Integers type 'double'?)","code":""},{"path":"/reference/arg_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"arg_check — arg_check","text":"","code":"arg_check(   data,   class = NULL,   typeof = NULL,   mode = NULL,   length = NULL,   prop = FALSE,   double.as.integer.allowed = FALSE,   options = NULL,   all.options.in.data = FALSE,   na.contain = FALSE,   neg.values = TRUE,   inf.values = TRUE,   print = FALSE,   data.name = NULL,   fun.name = NULL )"},{"path":"/reference/arg_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"arg_check — arg_check","text":"data Object test. class Single character string. Either one class() result \"vector\" \"ggplot2\" (.e., objects class c(\"gg\", \"ggplot\")) NULL. See warning section . typeof Single character string. Either one typeof() result NULL. mode Single character string. Either one mode() result (non-vector object) NULL. length Single numeric value indicating length object. considered NULL. prop Single logical value. numeric values 0 1 (proportion)? TRUE, can used alone, without considering class, etc. double..integer.allowed Single logical value. TRUE, error reported cheking message argument set typeof == \"integer\" class == \"integer\", reality typeof == \"double\" class == \"numeric\" numbers strictly zero modulo (remainder division). means <- 1, typeof() -> \"double\" considered integer double..integer.allowed = TRUE. WARNING: data mod 1 == 0L isTRUE(.equal(data mod 1, 0)) used argument checks integers stored double (check decimal numbers approximate integers). options Vector character strings integers indicating possible option values data argument, NULL. Numbers type \"double\" accepted 0 modulo. .options..data Single logical value. TRUE, options must present least data argument, nothing else. FALSE, options must present data argument, nothing else. Ignored options NULL. na.contain Single logical value. Can data argument contain NA? neg.values Single logical value. negative numeric values authorized? Warning: default setting TRUE, meaning , case, check performed presence negative values. neg.values argument activated set FALSE. addition, (1) neg.values = FALSE can used class, typeof mode arguments NULL, otherwise return error message, (2) presence negative values checked neg.values = FALSE tested object factor following checking message returned \"OBJECT MUST MADE NON NEGATIVE VALUES FACTOR\". inf.values Single logical value. infinite numeric values authorized (Inf -Inf)? Identical remarks neg.values argument. print Single logical value. Print message $problem TRUE? Warning: set default FALSE, facilitates control checking message output using arg_check() inside functions. See example section. data.name Single character string indicating name object test. NULL, use assigned data argument returned message. fun.name Single character string indicating name function checked (.e., arg_check() used check arguments function). non-null, value fun.name added message returned arg_check().","code":""},{"path":"/reference/arg_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"arg_check — arg_check","text":"list containing: - §problem: logical. problem detected? - §text: message indicating details problem, absence problem. - §object.name: value data.name argument (.e., name checked object provided, NULL otherwise).","code":""},{"path":"/reference/arg_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"arg_check — arg_check","text":"- options == NULL, least class type mode length argument must non-null. - options non-null, class, type mode must NULL, length can NULL specified. - function tests written arguments, even written incoherent. instance, arg_check(data = factor(1), class = \"factor\", mode = \"character\") return problem, whatever object tested data argument, object can class \"factor\" mode \"character\" (factors class \"factor\" mode \"numeric\"). note, length object class \"environment\" always 0. - tested object NULL, function always return checking problem. - Argument \"class\" value \"vector\" means object tested class(data) returning \"numeric\", \"integer\", \"character\", \"logical\", \"complex\" \"expression\". Please, use another value class (e.g., class = \"call\" class = \"list\") types class objects - Since R >= 4.0.0, class(matrix()) returns \"matrix\" \"array\", \"matrix\" alone . However, use argument class = \"matrix\" check matrix object (class \"matrix\" \"array\" R >= 4.0.0) use argument class = \"array\" check array object (class \"array\" R >= 4.0.0).","code":""},{"path":"/reference/arg_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"arg_check — arg_check","text":"","code":"test <- matrix(1:3) # arg_check(data = test, print = TRUE, class = \"vector\", mode = \"numeric\")  # commented because this example returns an error"},{"path":"/reference/arg_test.html","id":null,"dir":"Reference","previous_headings":"","what":"arg_test — arg_test","title":"arg_test — arg_test","text":"Test combinations argument values function.","code":""},{"path":"/reference/arg_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"arg_test — arg_test","text":"","code":"arg_test(   fun,   arg,   val,   expect.error = NULL,   parall = FALSE,   thread.nb = NULL,   print.count = 10,   plot.fun = FALSE,   export = FALSE,   res.path = NULL,   lib.path = NULL )"},{"path":"/reference/arg_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"arg_test — arg_test","text":"fun Single character string indicating name function tested (without brackets). arg Vector character strings arguments fun. least arguments default values must present vector. val List number compartments equal length arg, compartment containing values corresponding argument arg. different value must list vector. instance, argument 3 arg logical argument (values accepted TRUE, FALSE, NA). Thus, compartment 3 val can either list(TRUE, FALSE, NA), c(TRUE, FALSE, NA). NULL value alone must written list(NULL). expect.error List exactly structure val argument, containing FALSE TRUE, depending whether error expected (TRUE) (FALSE) corresponding value val. message returned depending discrepancies expected observed errors. See examples . BEWARE: always possible write expected errors combination argument values. Ignored NULL. parall Single logical value. Force parallelization ? thread.nb Single numeric integer indicating number threads use ever parallelization required. NULL, available threads used. Ignored parall FALSE. print.count Single interger value. Print working progress message every print.count loops. BEWARE: can increase substentially time complete process using small integer value, like 10 instance. Use Inf loop message desired. plot.fun Single logical value. Plot plotting function tested test? Ignored tested function graphic function. export Single logical value. Export results .RData file .tsv file? FALSE, return list console (see ). BEWARE: automatically set TRUE parall TRUE. means using parallelization, results systematically exported, returned console. res.path Single character string indicating absolute pathway folder txt results pdfs, containing plots, saved. Several txt pdf, one per thread, parallelization. Ignored export FALSE. Must specified parall TRUE export TRUE. lib.path Vector characters specifying absolute pathways directories containing required packages default directories. Ignored NULL.","code":""},{"path":"/reference/arg_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"arg_test — arg_test","text":"One several pdf plotting function tested plot.fun argument TRUE. , export FALSE list containing: - $fun: tested function. - $ini: initial input values. - $data: data frame combination tested, containing following columns: # different values tested, named arguments      - $kind: vector character strings indicating kind test result: either \"ERROR\", \"WARNING\", \"OK\".      - $problem: logical vector indicating error . - $expected.error: optional logical vector indicating expected error specified expect.error argument.      - $message: either NULL $kind always \"OK\", messages. - $sys.info: system packages info. export TRUE: - list object .RData file. - also $data data frame .tsv file. - expect.error non NULL discrepancy, $data data frame .tsv file containing rows discrepancies expected observed errors.","code":""},{"path":"/reference/arg_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"arg_test — arg_test","text":"Limited 43 arguments least 2 values . total number arguments tested can additional arguments single value. limit due nested \"\" loops (https://stat.ethz.ch/pipermail/r-help/2008-March/157341.html), limitation away number tests performed 2^43.","code":""},{"path":"/reference/arg_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"arg_test — arg_test","text":"","code":"arg_test(fun = \"unique\", arg = c(\"x\", \"incomparables\"),  val = list(x = list(1:10, c(1,1,2,8), NA), incomparable = c(TRUE, FALSE, NA))) #>  #> test JOB IGNITION #>  #> THE TOTAL NUMBER OF TESTS IS: 9 #>  #> LOOP PROCESS ENDED | LOOP 9 / 9 | TIME SPENT: 17S #>  #> $fun #> [1] \"unique\" #>  #> $ini #> arg_test(fun = \"unique\", arg = c(\"x\", \"incomparables\"), val = list(x = list(1:10,  #>     c(1, 1, 2, 8), NA), incomparable = c(TRUE, FALSE, NA))) #>  #> $data #>                               x incomparables kind problem message #> arg_test_1 1 2 3 4 5 6 7 8 9 10          TRUE   OK   FALSE         #> arg_test_2 1 2 3 4 5 6 7 8 9 10         FALSE   OK   FALSE         #> arg_test_3 1 2 3 4 5 6 7 8 9 10            NA   OK   FALSE         #> arg_test_4              1 1 2 8          TRUE   OK   FALSE         #> arg_test_5              1 1 2 8         FALSE   OK   FALSE         #> arg_test_6              1 1 2 8            NA   OK   FALSE         #> arg_test_7                   NA          TRUE   OK   FALSE         #> arg_test_8                   NA         FALSE   OK   FALSE         #> arg_test_9                   NA            NA   OK   FALSE         #>  #> $sys.info #> R version 4.3.1 (2023-06-16 ucrt) #> Platform: x86_64-w64-mingw32/x64 (64-bit) #> Running under: Windows 10 x64 (build 19045) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=C                   LC_CTYPE=French_France.utf8    #> [3] LC_MONETARY=French_France.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=French_France.utf8     #>  #> time zone: Europe/Paris #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] saferDev_1.0 #>  #> loaded via a namespace (and not attached): #>  [1] Matrix_1.5-4.1    R6_2.5.1          Rcpp_1.0.11       askpass_1.1       #>  [5] brio_1.1.3        bslib_0.5.1       cachem_1.0.8      cli_3.6.1         #>  [9] colorspace_2.1-0  compiler_4.3.1    curl_5.0.2        desc_1.4.2        #> [13] digest_0.6.33     downlit_0.4.3     dplyr_1.1.3       evaluate_0.22     #> [17] fansi_1.0.4       fastmap_1.1.1     fs_1.6.3          generics_0.1.3    #> [21] ggplot2_3.4.4     glue_1.6.2        grid_4.3.1        gtable_0.3.4      #> [25] htmltools_0.5.7   httr_1.4.7        jquerylib_0.1.4   jsonlite_1.8.7    #> [29] knitr_1.44        lattice_0.21-8    lifecycle_1.0.4   lubridate_1.9.2   #> [33] magrittr_2.0.3    memoise_2.0.1     munsell_0.5.0     parallel_4.3.1    #> [37] pdftools_3.3.3    pillar_1.9.0      pkgconfig_2.0.3   pkgdown_2.0.7     #> [41] png_0.1-8         purrr_1.0.2       qpdf_1.3.2        ragg_1.2.5        #> [45] remotes_2.4.2.1   reticulate_1.32.0 rlang_1.1.2       rmarkdown_2.25    #> [49] rprojroot_2.0.3   rstudioapi_0.15.0 sass_0.4.7        scales_1.2.1      #> [53] systemfonts_1.0.4 testthat_3.2.0    textshaping_0.3.6 tibble_3.2.1      #> [57] tidyselect_1.2.0  timechange_0.2.0  tools_4.3.1       utf8_1.2.3        #> [61] vctrs_0.6.5       whisker_0.4.1     withr_2.5.1       xfun_0.40         #> [65] xml2_1.3.5        yaml_2.3.7        #>   arg_test(fun = \"unique\", arg = c(\"x\", \"incomparables\"),  val = list(x = list(1:10, c(1,1,2,8), NA),  incomparable = c(TRUE, FALSE, NA)), expect.error = list(x = list(FALSE, FALSE, TRUE),  incomparable = c(FALSE, FALSE, TRUE))) #>  #> test JOB IGNITION #>  #> THE TOTAL NUMBER OF TESTS IS: 9 #>  #> LOOP PROCESS ENDED | LOOP 9 / 9 | TIME SPENT: 17S #>  #> DISCREPANCIES BETWEEN EXPECTED AND OBSERVED ERRORS (SEE THE $data RESULT) #>  #> $fun #> [1] \"unique\" #>  #> $ini #> arg_test(fun = \"unique\", arg = c(\"x\", \"incomparables\"), val = list(x = list(1:10,  #>     c(1, 1, 2, 8), NA), incomparable = c(TRUE, FALSE, NA)), expect.error = list(x = list(FALSE,  #>     FALSE, TRUE), incomparable = c(FALSE, FALSE, TRUE))) #>  #> $data #>                               x incomparables kind problem expected.error #> arg_test_1 1 2 3 4 5 6 7 8 9 10          TRUE   OK   FALSE          FALSE #> arg_test_2 1 2 3 4 5 6 7 8 9 10         FALSE   OK   FALSE          FALSE #> arg_test_3 1 2 3 4 5 6 7 8 9 10            NA   OK   FALSE           TRUE #> arg_test_4              1 1 2 8          TRUE   OK   FALSE          FALSE #> arg_test_5              1 1 2 8         FALSE   OK   FALSE          FALSE #> arg_test_6              1 1 2 8            NA   OK   FALSE           TRUE #> arg_test_7                   NA          TRUE   OK   FALSE           TRUE #> arg_test_8                   NA         FALSE   OK   FALSE           TRUE #> arg_test_9                   NA            NA   OK   FALSE           TRUE #>            message #> arg_test_1         #> arg_test_2         #> arg_test_3         #> arg_test_4         #> arg_test_5         #> arg_test_6         #> arg_test_7         #> arg_test_8         #> arg_test_9         #>  #> $sys.info #> R version 4.3.1 (2023-06-16 ucrt) #> Platform: x86_64-w64-mingw32/x64 (64-bit) #> Running under: Windows 10 x64 (build 19045) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=C                   LC_CTYPE=French_France.utf8    #> [3] LC_MONETARY=French_France.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=French_France.utf8     #>  #> time zone: Europe/Paris #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] saferDev_1.0 #>  #> loaded via a namespace (and not attached): #>  [1] Matrix_1.5-4.1    R6_2.5.1          Rcpp_1.0.11       askpass_1.1       #>  [5] brio_1.1.3        bslib_0.5.1       cachem_1.0.8      cli_3.6.1         #>  [9] colorspace_2.1-0  compiler_4.3.1    curl_5.0.2        desc_1.4.2        #> [13] digest_0.6.33     downlit_0.4.3     dplyr_1.1.3       evaluate_0.22     #> [17] fansi_1.0.4       fastmap_1.1.1     fs_1.6.3          generics_0.1.3    #> [21] ggplot2_3.4.4     glue_1.6.2        grid_4.3.1        gtable_0.3.4      #> [25] htmltools_0.5.7   httr_1.4.7        jquerylib_0.1.4   jsonlite_1.8.7    #> [29] knitr_1.44        lattice_0.21-8    lifecycle_1.0.4   lubridate_1.9.2   #> [33] magrittr_2.0.3    memoise_2.0.1     munsell_0.5.0     parallel_4.3.1    #> [37] pdftools_3.3.3    pillar_1.9.0      pkgconfig_2.0.3   pkgdown_2.0.7     #> [41] png_0.1-8         purrr_1.0.2       qpdf_1.3.2        ragg_1.2.5        #> [45] remotes_2.4.2.1   reticulate_1.32.0 rlang_1.1.2       rmarkdown_2.25    #> [49] rprojroot_2.0.3   rstudioapi_0.15.0 sass_0.4.7        scales_1.2.1      #> [53] systemfonts_1.0.4 testthat_3.2.0    textshaping_0.3.6 tibble_3.2.1      #> [57] tidyselect_1.2.0  timechange_0.2.0  tools_4.3.1       utf8_1.2.3        #> [61] vctrs_0.6.5       whisker_0.4.1     withr_2.5.1       xfun_0.40         #> [65] xml2_1.3.5        yaml_2.3.7        #>   arg_test(fun = \"unique\", arg = c(\"x\", \"incomparables\"),  val = list(x = list(1:10, c(1,1,2,8), NA), incomparable = c(TRUE, FALSE, NA)),  expect.error = list(x = list(FALSE, FALSE, TRUE), incomparable = c(FALSE, FALSE, TRUE)),  export = TRUE, res.path = getwd()) #>  #> test JOB IGNITION #>  #> THE TOTAL NUMBER OF TESTS IS: 9 #>  #> LOOP PROCESS ENDED | LOOP 9 / 9 | TIME SPENT: 17S #>  #> DISCREPANCIES BETWEEN EXPECTED AND OBSERVED ERRORS (SEE THE discrepancy_table_from_arg_test_1-9.tsv FILE) #>  #> test JOB END #>  #> TIME: 2024-01-29 16:16:30.412494 #>  #> TOTAL TIME LAPSE: 17S #>  #>   # Return an error if you run this example # arg_test(fun = \"round\", arg = c(\"data\", \"dec.nb\", \"after.lead.zero\"), val = list(L1 = list(c(1, 1.0002256, 1.23568), \"a\", NA), L2 = list(2, c(1,3), NA), L3 = c(TRUE, FALSE, NA)))  arg_test(fun = \"plot\", arg = c(\"x\", \"y\"), val = list(x = list(1:10, 12:13, NA, (1:10)^2),  y = list(1:10, NA, NA)),  expect.error = list(x = list(FALSE, TRUE, TRUE, FALSE),  y = list(FALSE, TRUE, TRUE)), parall = FALSE, thread.nb = NULL, plot.fun = TRUE,  res.path = \".\", lib.path = NULL) #>  #> test JOB IGNITION #>  #> THE TOTAL NUMBER OF TESTS IS: 12 #>  #> LOOP 10 / 12 | TIME SPENT: 19S | EXPECTED END: 2024-01-29 16:16:54.168458 #> LOOP PROCESS ENDED | LOOP 12 / 12 | TIME SPENT: 22S #>  #> NO DISCREPANCY BETWEEN EXPECTED AND OBSERVED ERRORS #>  #> $fun #> [1] \"plot\" #>  #> $ini #> arg_test(fun = \"plot\", arg = c(\"x\", \"y\"), val = list(x = list(1:10,  #>     12:13, NA, (1:10)^2), y = list(1:10, NA, NA)), expect.error = list(x = list(FALSE,  #>     TRUE, TRUE, FALSE), y = list(FALSE, TRUE, TRUE)), parall = FALSE,  #>     thread.nb = NULL, plot.fun = TRUE, res.path = \".\", lib.path = NULL) #>  #> $data #>                                       x                    y  kind problem #> arg_test_01        1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10    OK   FALSE #> arg_test_02        1 2 3 4 5 6 7 8 9 10                   NA ERROR    TRUE #> arg_test_03        1 2 3 4 5 6 7 8 9 10                   NA ERROR    TRUE #> arg_test_04                       12 13 1 2 3 4 5 6 7 8 9 10 ERROR    TRUE #> arg_test_05                       12 13                   NA ERROR    TRUE #> arg_test_06                       12 13                   NA ERROR    TRUE #> arg_test_07                          NA 1 2 3 4 5 6 7 8 9 10 ERROR    TRUE #> arg_test_08                          NA                   NA ERROR    TRUE #> arg_test_09                          NA                   NA ERROR    TRUE #> arg_test_10 1 4 9 16 25 36 49 64 81 100 1 2 3 4 5 6 7 8 9 10    OK   FALSE #> arg_test_11 1 4 9 16 25 36 49 64 81 100                   NA ERROR    TRUE #> arg_test_12 1 4 9 16 25 36 49 64 81 100                   NA ERROR    TRUE #>             expected.error #> arg_test_01          FALSE #> arg_test_02           TRUE #> arg_test_03           TRUE #> arg_test_04           TRUE #> arg_test_05           TRUE #> arg_test_06           TRUE #> arg_test_07           TRUE #> arg_test_08           TRUE #> arg_test_09           TRUE #> arg_test_10          FALSE #> arg_test_11           TRUE #> arg_test_12           TRUE #>                                                                                      message #> arg_test_01                                                                                  #> arg_test_02 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_03 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_04 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_05 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_06 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_07 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_08                          Error in plot.window(...) : need finite 'xlim' values\\n #> arg_test_09                          Error in plot.window(...) : need finite 'xlim' values\\n #> arg_test_10                                                                                  #> arg_test_11 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_12 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #>  #> $sys.info #> R version 4.3.1 (2023-06-16 ucrt) #> Platform: x86_64-w64-mingw32/x64 (64-bit) #> Running under: Windows 10 x64 (build 19045) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=C                   LC_CTYPE=French_France.utf8    #> [3] LC_MONETARY=French_France.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=French_France.utf8     #>  #> time zone: Europe/Paris #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] saferDev_1.0 #>  #> loaded via a namespace (and not attached): #>  [1] Matrix_1.5-4.1    R6_2.5.1          Rcpp_1.0.11       askpass_1.1       #>  [5] brio_1.1.3        bslib_0.5.1       cachem_1.0.8      cli_3.6.1         #>  [9] colorspace_2.1-0  compiler_4.3.1    curl_5.0.2        desc_1.4.2        #> [13] digest_0.6.33     downlit_0.4.3     dplyr_1.1.3       evaluate_0.22     #> [17] fansi_1.0.4       fastmap_1.1.1     fs_1.6.3          generics_0.1.3    #> [21] ggplot2_3.4.4     glue_1.6.2        grid_4.3.1        gtable_0.3.4      #> [25] htmltools_0.5.7   httr_1.4.7        jquerylib_0.1.4   jsonlite_1.8.7    #> [29] knitr_1.44        lattice_0.21-8    lifecycle_1.0.4   lubridate_1.9.2   #> [33] magrittr_2.0.3    memoise_2.0.1     munsell_0.5.0     parallel_4.3.1    #> [37] pdftools_3.3.3    pillar_1.9.0      pkgconfig_2.0.3   pkgdown_2.0.7     #> [41] png_0.1-8         purrr_1.0.2       qpdf_1.3.2        ragg_1.2.5        #> [45] remotes_2.4.2.1   reticulate_1.32.0 rlang_1.1.2       rmarkdown_2.25    #> [49] rprojroot_2.0.3   rstudioapi_0.15.0 sass_0.4.7        scales_1.2.1      #> [53] systemfonts_1.0.4 testthat_3.2.0    textshaping_0.3.6 tibble_3.2.1      #> [57] tidyselect_1.2.0  timechange_0.2.0  tools_4.3.1       utf8_1.2.3        #> [61] vctrs_0.6.5       whisker_0.4.1     withr_2.5.1       xfun_0.40         #> [65] xml2_1.3.5        yaml_2.3.7        #>   arg_test(fun = \"plot\", arg = c(\"x\", \"y\"), val = list(x = list(1:10, 12:13, NA,  (1:10)^2), y = list(1:10, NA, NA)), parall = FALSE, thread.nb = 4,  plot.fun = TRUE, res.path = \".\",  lib.path = NULL) #>  #> test JOB IGNITION #>  #> THE TOTAL NUMBER OF TESTS IS: 12 #>  #> LOOP 10 / 12 | TIME SPENT: 18S | EXPECTED END: 2024-01-29 16:17:17.453953 #> LOOP PROCESS ENDED | LOOP 12 / 12 | TIME SPENT: 22S #>  #> $fun #> [1] \"plot\" #>  #> $ini #> arg_test(fun = \"plot\", arg = c(\"x\", \"y\"), val = list(x = list(1:10,  #>     12:13, NA, (1:10)^2), y = list(1:10, NA, NA)), parall = FALSE,  #>     thread.nb = 4, plot.fun = TRUE, res.path = \".\", lib.path = NULL) #>  #> $data #>                                       x                    y  kind problem #> arg_test_01        1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10    OK   FALSE #> arg_test_02        1 2 3 4 5 6 7 8 9 10                   NA ERROR    TRUE #> arg_test_03        1 2 3 4 5 6 7 8 9 10                   NA ERROR    TRUE #> arg_test_04                       12 13 1 2 3 4 5 6 7 8 9 10 ERROR    TRUE #> arg_test_05                       12 13                   NA ERROR    TRUE #> arg_test_06                       12 13                   NA ERROR    TRUE #> arg_test_07                          NA 1 2 3 4 5 6 7 8 9 10 ERROR    TRUE #> arg_test_08                          NA                   NA ERROR    TRUE #> arg_test_09                          NA                   NA ERROR    TRUE #> arg_test_10 1 4 9 16 25 36 49 64 81 100 1 2 3 4 5 6 7 8 9 10    OK   FALSE #> arg_test_11 1 4 9 16 25 36 49 64 81 100                   NA ERROR    TRUE #> arg_test_12 1 4 9 16 25 36 49 64 81 100                   NA ERROR    TRUE #>                                                                                      message #> arg_test_01                                                                                  #> arg_test_02 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_03 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_04 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_05 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_06 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_07 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_08                          Error in plot.window(...) : need finite 'xlim' values\\n #> arg_test_09                          Error in plot.window(...) : need finite 'xlim' values\\n #> arg_test_10                                                                                  #> arg_test_11 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #> arg_test_12 Error in xy.coords(x, y, xlabel, ylabel, log) : \\n  'x' and 'y' lengths differ\\n #>  #> $sys.info #> R version 4.3.1 (2023-06-16 ucrt) #> Platform: x86_64-w64-mingw32/x64 (64-bit) #> Running under: Windows 10 x64 (build 19045) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=C                   LC_CTYPE=French_France.utf8    #> [3] LC_MONETARY=French_France.utf8 LC_NUMERIC=C                   #> [5] LC_TIME=French_France.utf8     #>  #> time zone: Europe/Paris #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] saferDev_1.0 #>  #> loaded via a namespace (and not attached): #>  [1] Matrix_1.5-4.1    R6_2.5.1          Rcpp_1.0.11       askpass_1.1       #>  [5] brio_1.1.3        bslib_0.5.1       cachem_1.0.8      cli_3.6.1         #>  [9] colorspace_2.1-0  compiler_4.3.1    curl_5.0.2        desc_1.4.2        #> [13] digest_0.6.33     downlit_0.4.3     dplyr_1.1.3       evaluate_0.22     #> [17] fansi_1.0.4       fastmap_1.1.1     fs_1.6.3          generics_0.1.3    #> [21] ggplot2_3.4.4     glue_1.6.2        grid_4.3.1        gtable_0.3.4      #> [25] htmltools_0.5.7   httr_1.4.7        jquerylib_0.1.4   jsonlite_1.8.7    #> [29] knitr_1.44        lattice_0.21-8    lifecycle_1.0.4   lubridate_1.9.2   #> [33] magrittr_2.0.3    memoise_2.0.1     munsell_0.5.0     parallel_4.3.1    #> [37] pdftools_3.3.3    pillar_1.9.0      pkgconfig_2.0.3   pkgdown_2.0.7     #> [41] png_0.1-8         purrr_1.0.2       qpdf_1.3.2        ragg_1.2.5        #> [45] remotes_2.4.2.1   reticulate_1.32.0 rlang_1.1.2       rmarkdown_2.25    #> [49] rprojroot_2.0.3   rstudioapi_0.15.0 sass_0.4.7        scales_1.2.1      #> [53] systemfonts_1.0.4 testthat_3.2.0    textshaping_0.3.6 tibble_3.2.1      #> [57] tidyselect_1.2.0  timechange_0.2.0  tools_4.3.1       utf8_1.2.3        #> [61] vctrs_0.6.5       whisker_0.4.1     withr_2.5.1       xfun_0.40         #> [65] xml2_1.3.5        yaml_2.3.7        #>   # set.seed(1) ;  # obs1 <- data.frame(Time = c(rnorm(10), rnorm(10) + 2), Group1 = rep(c(\"G\", \"H\"), each = 10),  # stringsAsFactors = TRUE) ; arg_test(fun = \"fun_gg_boxplot\", arg = c(\"data1\", \"y\", \"categ\"),  # val = list(L1 = list(L1 = obs1), L2 = list(L1 = \"Time\"), L3 = list(L1 = \"Group1\")))  # set.seed(1) ;  # obs1 <- data.frame(Time = c(rnorm(10), rnorm(10) + 2), Group1 = rep(c(\"G\", \"H\"), each = 10),  # stringsAsFactors = TRUE) ;  # arg_test(fun = \"fun_gg_boxplot\", arg = c(\"data1\", \"y\", \"categ\"), val = list(L1 = list(obs1),  # L2 = \"Time\", L3 = \"Group1\"), parall = FALSE, thread.nb = NULL, plot.fun = TRUE,  # res.path = \"C:\\Users\\yhan\\Desktop\\\", lib.path = \"C:\\Program Files\\R\\R-4.3.1\\library\\\")  # library(ggplot2) ; arg_test(fun = \"geom_histogram\", arg = c(\"data\", \"mapping\"),  # val = list(x = list(data.frame(X = \"a\", stringsAsFactors = TRUE)),  # y = list(ggplot2::aes(x = X))), parall = FALSE, thread.nb = NULL,  # plot.fun = TRUE, res.path = \"C:\\Users\\yhan\\Desktop\\\",  # lib.path = \"C:\\Program Files\\R\\R-4.3.1\\library\\\")  # BEWARE: ggplot2::geom_histogram does not work"},{"path":"/reference/env_check.html","id":null,"dir":"Reference","previous_headings":"","what":"env_check — env_check","title":"env_check — env_check","text":"Verify object names environment defined pos parameter identical object names environments (following R Scope). can used verify names used objects inside function working environment override names objects already present R environments, following R scope.","code":""},{"path":"/reference/env_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"env_check — env_check","text":"","code":"env_check(pos = 1, name = NULL)"},{"path":"/reference/env_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"env_check — env_check","text":"pos Single non nul positive integer indicating position environment checked (argument n parent.frame() function). Value 1 means one step env_check() local environment (default). means env_check(pos = 1) used inside function , checks name object local environment function also present environments, following R Scope, starting just environment. env_check(pos = 1) used working (Global) environment (named .GlobalEnv), checks object names .GlobalEnv environment, environments. See examples . name Single character string indicating string added output string, instance name function inside env_check() used.","code":""},{"path":"/reference/env_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"env_check — env_check","text":"character string indicating object names tested environment match object names environments, following R scope, NULL match.","code":""},{"path":"/reference/env_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"env_check — env_check","text":"","code":"# Example in the working environment  mean <- 1  # creation of the object mean with value 1 in the .GlobalEnv environment,  # knowing that the mean() function also exists in the environment base, above .GlobalEnv. t.test <- 1  # creation of the object t.test with value 1 in the .GlobalEnv environment,  # knowing that the t.test() function also exists in the environment stats, above .GlobalEnv. search()  #>  [1] \".GlobalEnv\"        \"package:saferDev\"  \"package:stats\"     #>  [4] \"package:graphics\"  \"package:grDevices\" \"package:utils\"     #>  [7] \"package:datasets\"  \"package:methods\"   \"Autoloads\"         #> [10] \"tools:callr\"       \"package:base\"      # current R scope (order of the successive R environments). utils::find(\"mean\")  #> [1] \"package:base\" # where the objects with the name \"mean\" are present. utils::find(\"t.test\")  #> [1] \"package:stats\" # where the objects with the name \"mean\" are present. a <- env_check(pos = 1)  # test if any object name of the global environment are above environments  # (or env_check(), as pos = 1 is the default value). a # the output string of sec(). #> [1] \"SOME VARIABLES OF THE CHECKED ENVIRONMENT ARE ALSO PRESENT IN :\\npackage:stats: t.test\\npackage:base: mean\\n\" cat(a) # the evaluated output. #> SOME VARIABLES OF THE CHECKED ENVIRONMENT ARE ALSO PRESENT IN : #> package:stats: t.test #> package:base: mean env_check(pos = 2)  #> [1] \"SOME VARIABLES OF THE CHECKED ENVIRONMENT ARE ALSO PRESENT IN :\\neval_with_user_handlers(expr, envir, enclos, user_handlers): enclos envir expr\\nwithCallingHandlers(withVisible(eval_with_user_handlers(expr, envir, enclos, user_handlers)), warning = wHandler, error = eHandler, message = mHandler): expr\\ndoTryCatch(return(expr), name, parentenv, handler): expr\\ntryCatchOne(expr, names, parentenv, handlers[[1]]): expr\\ntryCatchList(expr, classes, parentenv, handlers): expr\\ntryCatch(expr, error = function(e) {\\n    call <- conditionCall(e)\\n    if (!is.null(call)) {\\n        if (identical(call[[1]], quote(doTryCatch))) \\n            call <- sys.call(-4)\\n        dcall <- deparse(call, nlines = 1)\\n        prefix <- paste(\\\"Error in\\\", dcall, \\\": \\\")\\n        LONG <- 75\\n        sm <- strsplit(conditionMessage(e), \\\"\\\\n\\\")[[1]]\\n        w <- 14 + nchar(dcall, type = \\\"w\\\") + nchar(sm[1], type = \\\"w\\\")\\n        if (is.na(w)) \\n            w <- 14 + nchar(dcall, type = \\\"b\\\") + nchar(sm[1], type = \\\"b\\\")\\n        if (w > LONG) \\n            prefix <- paste0(prefix, \\\"\\\\n  \\\")\\n    }\\n    else prefix <- \\\"Error : \\\"\\n    msg <- paste0(prefix, conditionMessage(e), \\\"\\\\n\\\")\\n    .Internal(seterrmessage(msg[1]))\\n    if (!silent && isTRUE(getOption(\\\"show.error.messages\\\"))) {\\n        cat(msg, file = outFile)\\n        .Internal(printDeferredWarnings())\\n    }\\n    invisible(structure(msg, class = \\\"try-error\\\", condition = e))\\n}): expr\\ntry(f, silent = TRUE): expr\\nevaluate_call(expr, parsed$src[[i]], envir = envir, enclos = enclos, debug = debug, last = i == length(out), use_try = stop_on_error != 2, keep_warning = keep_warning, keep_message = keep_message, log_echo = log_echo, log_warning = log_warning, output_handler = output_handler, include_timing = include_timing): enclos envir expr\\nevaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler): enclos envir expr\\nwithCallingHandlers(data_reference_topic(topic, pkg, examples_env = examples_env, run_dont_run = run_dont_run), error = function(err) {\\n    msg <- c(paste0(\\\"Failed to parse Rd in \\\", topic$file_in), i = err$message)\\n    abort(msg, parent = err)\\n}): expr\\nwithCallingHandlers(expr, error = function(cnd) {\\n    if (i == 0) {\\n    }\\n    else {\\n        message <- c(i = \\\"In index: {i}.\\\")\\n        if (!is.null(names) && !is.na(names[[i]]) && names[[i]] != \\\"\\\") {\\n            name <- names[[i]]\\n            message <- c(message, i = \\\"With name: {name}.\\\")\\n        }\\n        else {\\n            name <- NULL\\n        }\\n        cli::cli_abort(message, location = i, name = name, parent = cnd, call = error_call, class = \\\"purrr_error_indexed\\\")\\n    }\\n}): expr\\nwith_indexed_errors(i = i, names = names, error_call = .purrr_error_call, call_with_cleanup(map_impl, environment(), .type, .progress, n, names, i)): expr\\n(function (what, args, quote = FALSE, envir = parent.frame()) \\n{\\n    if (!is.list(args)) \\n        stop(\\\"second argument must be a list\\\")\\n    if (quote) \\n        args <- lapply(args, enquote)\\n    .Internal(do.call(what, args, envir))\\n})(base::quote(function (..., cli_colors, pkgdown_internet) \\n{\\n    options(cli.num_colors = cli_colors, crayon.colors = cli_colors, pkgdown.internet = pkgdown_internet)\\n    pkgdown::build_site(...)\\n}), base::quote(list(pkg = list(package = \\\"saferDev\\\", version = \\\"1.0\\\", lang = \\\"en\\\", src_path = \\\"C:/Users/yhan/Documents/Git_projects/saferDev\\\", dst_path = \\\"C:/Users/yhan/Documents/Git_projects/saferDev/docs\\\", install_metadata = FALSE, desc = <environment>, meta = list(template = list(bootstrap = 5, bslib = list(primary = \\\"#0054AD\\\", `border-radius` = \\\"0.5rem\\\", `btn-border-radius` = \\\"0.25rem\\\")), authors = list(`Yushi Han` = list(href = \\\"https://github.com/yushiHn\\\"), `Gaël Millot` = list(href = \\\"https://gitlab.pasteur.fr/gmillot\\\")), \\n    reference = list(list(title = \\\"arg_check\\\", contents = \\\"arg_check\\\"), list(title = \\\"arg_test\\\", contents = \\\"arg_test\\\"), list(title = \\\"env_check\\\", contents = \\\"env_check\\\"), list(title = \\\"get_message\\\", contents = \\\"get_message\\\"), list(title = \\\"is_function_here\\\", contents = \\\"is_function_here\\\"), list(title = \\\"is_package_here\\\", contents = \\\"is_package_here\\\"), list(title = \\\"is_python_package_here\\\", contents = \\\"is_python_package_here\\\"), list(title = \\\"report\\\", contents = \\\"report\\\"))), figures = list(dev = \\\"ragg::agg_png\\\", \\n    dpi = 96, dev.args = list(), fig.ext = \\\"png\\\", fig.width = 7.29166666666667, fig.height = NULL, fig.retina = 2, fig.asp = 0.618046971569839, bg = NULL, other.parameters = list()), repo = NULL, development = list(destination = \\\"dev\\\", mode = \\\"default\\\", version_label = \\\"muted\\\", in_dev = FALSE), topics = list(name = c(arg_check.Rd = \\\"arg_check\\\", arg_test.Rd = \\\"arg_test\\\", env_check.Rd = \\\"env_check\\\", get_message.Rd = \\\"get_message\\\", internal_function.Rd = \\\".pack_and_function_check\\\", is_function_here.Rd = \\\"is_function_here\\\", \\nis_package_here.Rd = \\\"is_package_here\\\", is_python_package_here.Rd = \\\"is_python_package_here\\\", report.Rd = \\\"report\\\"), file_in = c(\\\"arg_check.Rd\\\", \\\"arg_test.Rd\\\", \\\"env_check.Rd\\\", \\\"get_message.Rd\\\", \\\"internal_function.Rd\\\", \\\"is_function_here.Rd\\\", \\\"is_package_here.Rd\\\", \\\"is_python_package_here.Rd\\\", \\\"report.Rd\\\"), file_out = c(\\\"arg_check.html\\\", \\\"arg_test.html\\\", \\\"env_check.html\\\", \\\"get_message.html\\\", \\\"internal_function.html\\\", \\\"is_function_here.html\\\", \\\"is_package_here.html\\\", \\\"is_python_package_here.html\\\", \\\"report.html\\\"\\n), alias = list(arg_check.Rd = \\\"arg_check\\\", arg_test.Rd = \\\"arg_test\\\", env_check.Rd = \\\"env_check\\\", get_message.Rd = \\\"get_message\\\", internal_function.Rd = c(\\\".pack_and_function_check\\\", \\\".base_function_check\\\"), is_function_here.Rd = \\\"is_function_here\\\", is_package_here.Rd = \\\"is_package_here\\\", is_python_package_here.Rd = \\\"is_python_package_here\\\", report.Rd = \\\"report\\\"), funs = list(arg_check.Rd = \\\"arg_check()\\\", arg_test.Rd = \\\"arg_test()\\\", env_check.Rd = \\\"env_check()\\\", get_message.Rd = \\\"get_message()\\\", \\n    internal_function.Rd = c(\\\".pack_and_function_check()\\\", \\\".base_function_check()\\\"), is_function_here.Rd = \\\"is_function_here()\\\", is_package_here.Rd = \\\"is_package_here()\\\", is_python_package_here.Rd = \\\"is_python_package_here()\\\", report.Rd = \\\"report()\\\"), title = c(arg_check.Rd = \\\"arg_check\\\", arg_test.Rd = \\\"arg_test\\\", env_check.Rd = \\\"env_check\\\", get_message.Rd = \\\"get_message\\\", internal_function.Rd = \\\".pack_and_function_check\\\", is_function_here.Rd = \\\"is_function_here\\\", is_package_here.Rd = \\\"is_package_here\\\", \\nis_python_package_here.Rd = \\\"is_python_package_here\\\", report.Rd = \\\"report\\\"), rd = list(arg_check.Rd = list(\\\"% Generated by roxygen2: do not edit by hand\\\", \\\"\\\\n\\\", \\\"% Please edit documentation in R/arg_check.R\\\", \\\"\\\\n\\\", list(\\\"arg_check\\\"), \\\"\\\\n\\\", list(\\\"arg_check\\\"), \\\"\\\\n\\\", list(\\\"arg_check\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"arg_check(\\\\n\\\", \\\"  data,\\\\n\\\", \\\"  class = NULL,\\\\n\\\", \\\"  typeof = NULL,\\\\n\\\", \\\"  mode = NULL,\\\\n\\\", \\\"  length = NULL,\\\\n\\\", \\\"  prop = FALSE,\\\\n\\\", \\\"  double.as.integer.allowed = FALSE,\\\\n\\\", \\\"  options = NULL,\\\\n\\\", \\n    \\\"  all.options.in.data = FALSE,\\\\n\\\", \\\"  na.contain = FALSE,\\\\n\\\", \\\"  neg.values = TRUE,\\\\n\\\", \\\"  inf.values = TRUE,\\\\n\\\", \\\"  print = FALSE,\\\\n\\\", \\\"  data.name = NULL,\\\\n\\\", \\\"  fun.name = NULL\\\\n\\\", \\\")\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", list(list(\\\"data\\\"), list(\\\"Object to test.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"class\\\"), list(\\\"Single character string. Either one of the class() result or \\\\\\\"vector\\\\\\\" or \\\\\\\"ggplot2\\\\\\\" (i.e., objects of class c(\\\\\\\"gg\\\\\\\", \\\\\\\"ggplot\\\\\\\")) or NULL. See the warning section below.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"typeof\\\"), \\n    list(\\\"Single character string. Either one of the typeof() result or NULL.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"mode\\\"), list(\\\"Single character string. Either one of the mode() result (for non-vector object) or NULL.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"length\\\"), list(\\\"Single numeric value indicating the length of the object. Not considered if NULL.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"prop\\\"), list(\\\"Single logical value. Are the numeric values between 0 and 1 (proportion)? If TRUE, can be used alone, without considering class, etc.\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"double.as.integer.allowed\\\"), list(\\\"Single logical value. If TRUE, no error is reported in the cheking message if argument is set to typeof == \\\\\\\"integer\\\\\\\" or class == \\\\\\\"integer\\\\\\\", while the reality is typeof == \\\\\\\"double\\\\\\\" or class == \\\\\\\"numeric\\\\\\\" but the numbers strictly have zero as modulo (remainder of a division). This means that i <- 1, which is typeof(i) -> \\\\\\\"double\\\\\\\" is considered as integer with double.as.integer.allowed = TRUE. WARNING: data mod 1 == 0L but not isTRUE(all.equal(data mod 1, 0)) is used here because the argument checks for integers stored as double (does not check for decimal numbers that are approximate integers).\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"options\\\"), list(\\\"Vector of character strings or integers indicating all the possible option values for the data argument, or NULL. Numbers of type \\\\\\\"double\\\\\\\" are accepted if they have a 0 modulo.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"all.options.in.data\\\"), list(\\\"Single logical value. If TRUE, all of the options must be present at least once in the data argument, and nothing else. If FALSE, some or all of the options must be present in the data argument, and nothing else. Ignored if options is NULL.\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"na.contain\\\"), list(\\\"Single logical value. Can the data argument contain NA?\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"neg.values\\\"), list(\\\"Single logical value. Are negative numeric values authorized? Warning: the default setting is TRUE, meaning that, in that case, no check is performed for the presence of negative values. The neg.values argument is activated only when set to FALSE. In addition, (1) neg.values = FALSE can only be used when class, typeof or mode arguments are not NULL, otherwise return an error message, (2) the presence of negative values is not checked with neg.values = FALSE if the tested object is a factor and the following checking message is returned \\\\\\\"OBJECT MUST BE MADE OF NON NEGATIVE VALUES BUT IS A FACTOR\\\\\\\".\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"inf.values\\\"), list(\\\"Single logical value. Are infinite numeric values authorized (Inf or -Inf)? Identical remarks as for the neg.values argument.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"print\\\"), list(\\\"Single logical value. Print the message if $problem is TRUE? Warning: set by default to FALSE, which facilitates the control of the checking message output when using arg_check() inside functions. See the example section.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"data.name\\\"), list(\\\"Single character string indicating the name of the object to test. If NULL, use what is assigned to the data argument for the returned message.\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"fun.name\\\"), list(\\\"Single character string indicating the name of the function checked (i.e., when arg_check() is used to check the arguments of this function). If non-null, the value of fun.name will be added into the message returned by arg_check().\\\")), \\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"A list containing:\\\\n\\\", \\\"\\\\n\\\", \\\"- §problem: logical. Is there any problem detected?\\\\n\\\", \\\"\\\\n\\\", \\\"- §text: message indicating the details of the problem, or the absence of problem.\\\\n\\\", \\\"\\\\n\\\", \\\"- §object.name: value of the data.name argument (i.e., name of the checked object if provided, NULL otherwise).\\\\n\\\"), \\n    \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"Check expected values of an argument of functions: class, type, mode, length, restricted values panel, kind of numeric values in addition to the distinction between 'integer' and 'double' (proportion only? Inf values authorized? negative values authorized? Integers of type 'double'?)\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"- If options == NULL, then at least class or type or mode or length argument must be non-null.\\\\n\\\", \\\" \\\\n\\\", \\\"- If options is non-null, then class, type and mode must be NULL, and length can be NULL or specified.\\\\n\\\", \\n        \\\" \\\\n\\\", \\\"- The function tests what is written in its arguments, even if what is written is incoherent. For instance, arg_check(data = factor(1), class = \\\\\\\"factor\\\\\\\", mode = \\\\\\\"character\\\\\\\") will return a problem, whatever the object tested in the data argument, because no object can be class \\\\\\\"factor\\\\\\\" and mode \\\\\\\"character\\\\\\\" (factors are class \\\\\\\"factor\\\\\\\" and mode \\\\\\\"numeric\\\\\\\"). Of note, length of object of class \\\\\\\"environment\\\\\\\" is always 0.\\\\n\\\", \\\" \\\\n\\\", \\\"- If the tested object is NULL, then the function will always return a checking problem.\\\\n\\\", \\n        \\\" \\\\n\\\", \\\"- Argument \\\\\\\"class\\\\\\\" with value \\\\\\\"vector\\\\\\\" means that the object is tested for class(data) returning only \\\\\\\"numeric\\\\\\\", \\\\\\\"integer\\\\\\\", \\\\\\\"character\\\\\\\", \\\\\\\"logical\\\\\\\", \\\\\\\"complex\\\\\\\" or \\\\\\\"expression\\\\\\\". Please, use another value of class (e.g., class = \\\\\\\"call\\\\\\\" or class = \\\\\\\"list\\\\\\\") for other types and class of objects\\\\n\\\", \\\" \\\\n\\\", \\\"- Since R >= 4.0.0, class(matrix()) returns \\\\\\\"matrix\\\\\\\" \\\\\\\"array\\\\\\\", and not \\\\\\\"matrix\\\\\\\" alone as before. However, use argument class = \\\\\\\"matrix\\\\\\\" to check for matrix object (of class \\\\\\\"matrix\\\\\\\" \\\\\\\"array\\\\\\\" in R >= 4.0.0) and use argument class = \\\\\\\"array\\\\\\\" to check for array object (of class \\\\\\\"array\\\\\\\" in R >= 4.0.0).\\\\n\\\"), \\n    \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"test <- matrix(1:3)\\\\n\\\", \\\"# arg_check(data = test, print = TRUE, class = \\\\\\\"vector\\\\\\\", mode = \\\\\\\"numeric\\\\\\\")  # commented because this example returns an error\\\\n\\\"), \\\"\\\\n\\\"), arg_test.Rd = list(\\\"% Generated by roxygen2: do not edit by hand\\\", \\\"\\\\n\\\", \\\"% Please edit documentation in R/arg_test.R\\\", \\\"\\\\n\\\", list(\\\"arg_test\\\"), \\\"\\\\n\\\", list(\\\"arg_test\\\"), \\\"\\\\n\\\", list(\\\"arg_test\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"arg_test(\\\\n\\\", \\\"  fun,\\\\n\\\", \\\"  arg,\\\\n\\\", \\\"  val,\\\\n\\\", \\\"  expect.error = NULL,\\\\n\\\", \\\"  parall = FALSE,\\\\n\\\", \\\"  thread.nb = NULL,\\\\n\\\", \\n    \\\"  print.count = 10,\\\\n\\\", \\\"  plot.fun = FALSE,\\\\n\\\", \\\"  export = FALSE,\\\\n\\\", \\\"  res.path = NULL,\\\\n\\\", \\\"  lib.path = NULL\\\\n\\\", \\\")\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", list(list(\\\"fun\\\"), list(\\\"Single character string indicating the name of the function tested (without brackets).\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"arg\\\"), list(\\\"Vector of character strings of arguments of fun. At least arguments that do not have default values must be present in this vector.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"val\\\"), list(\\\"List with number of compartments equal to the length of arg, each compartment containing values of the corresponding argument in arg. Each different value must be in a list or in a vector. For instance, argument 3 in arg is a logical argument (values accepted TRUE, FALSE, NA). Thus, compartment 3 of val can be either list(TRUE, FALSE, NA), or c(TRUE, FALSE, NA). NULL value alone must be written list(NULL).\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"expect.error\\\"), list(\\\"List of exactly the same structure as val argument, but containing FALSE or TRUE, depending on whether error is expected (TRUE) or not (FALSE) for each corresponding value of val. A message is returned depending on discrepancies between the expected and observed errors. See the examples below. BEWARE: not always possible to write the expected errors for all the combination of argument values. Ignored if NULL.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"parall\\\"), list(\\n        \\\"Single logical value. Force parallelization ?\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"thread.nb\\\"), list(\\\"Single numeric integer indicating the number of threads to use if ever parallelization is required. If NULL, all the available threads will be used. Ignored if parall is FALSE.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"print.count\\\"), list(\\\"Single interger value. Print a working progress message every print.count during loops. BEWARE: can increase substentially the time to complete the process if using a small integer value, like 10 for instance. Use Inf if no loop message desired.\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"plot.fun\\\"), list(\\\"Single logical value. Plot the plotting function tested for each test? Ignored if the tested function is not a graphic function.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"export\\\"), list(\\\"Single logical value. Export the results into a .RData file and into a .tsv file? If FALSE, return a list into the console (see below). BEWARE: will be automatically set to TRUE if parall is TRUE. This means that when using parallelization, the results are systematically exported, not returned into the console.\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"res.path\\\"), list(\\\"Single character string indicating the absolute pathway of the folder where the txt results and pdfs, containing all the plots, will be saved. Several txt and pdf, one per thread, if parallelization. Ignored if export is FALSE. Must be specified if parall is TRUE or if export is TRUE.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"lib.path\\\"), list(\\\"Vector of characters specifying the absolute pathways of the directories containing the required packages if not in the default directories. Ignored if NULL.\\\")), \\n    \\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"One or several pdf if a plotting function is tested and if the plot.fun argument is TRUE. \\\\n\\\", \\\"\\\\n\\\", \\\"And then, if export is FALSE a list containing:\\\\n\\\", \\\"\\\\n\\\", \\\"- $fun: the tested function.\\\\n\\\", \\\"\\\\n\\\", \\\"- $ini: the initial input values.\\\\n\\\", \\\"\\\\n\\\", \\\"- $data: a data frame of all the combination tested, containing the following columns:\\\\n\\\", \\\"\\\\n\\\", \\\"     # the different values tested, named by arguments\\\\n\\\", \\\"     - $kind: a vector of character strings indicating the kind of test result: either \\\\\\\"ERROR\\\\\\\", or \\\\\\\"WARNING\\\\\\\", or \\\\\\\"OK\\\\\\\".\\\\n\\\", \\n    \\\"     - $problem: a logical vector indicating if error or not.\\\\n\\\", \\\"     \\\\n\\\", \\\"     - $expected.error: optional logical vector indicating the expected error specified in the expect.error argument.\\\\n\\\", \\\"     - $message: either NULL if $kind is always \\\\\\\"OK\\\\\\\", or the messages.\\\\n\\\", \\\"     \\\\n\\\", \\\"- $sys.info: system and packages info.\\\\n\\\", \\\"\\\\n\\\", \\\"If export is TRUE: \\\\n\\\", \\\"\\\\n\\\", \\\"- the same list object into a .RData file.\\\\n\\\", \\\"\\\\n\\\", \\\"- also the $data data frame into a .tsv file.\\\\n\\\", \\\"\\\\n\\\", \\\"- if expect.error is non NULL and if any discrepancy, the $data data frame into a .tsv file but containing only the rows with discrepancies between expected and observed errors.\\\\n\\\"), \\n    \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"Test combinations of argument values of a function.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"Limited to 43 arguments with at least 2 values each. The total number of arguments tested can be more if the additional arguments have a single value. The limit is due to nested \\\\\\\"for\\\\\\\" loops (https://stat.ethz.ch/pipermail/r-help/2008-March/157341.html), but this limitation is away from the number of tests performed that would be 2^43.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"arg_test(fun = \\\\\\\"unique\\\\\\\", arg = c(\\\\\\\"x\\\\\\\", \\\\\\\"incomparables\\\\\\\"), \\\\n\\\", \\n        \\\"val = list(x = list(1:10, c(1,1,2,8), NA), incomparable = c(TRUE, FALSE, NA)))\\\\n\\\", \\\"\\\\n\\\", \\\"arg_test(fun = \\\\\\\"unique\\\\\\\", arg = c(\\\\\\\"x\\\\\\\", \\\\\\\"incomparables\\\\\\\"), \\\\n\\\", \\\"val = list(x = list(1:10, c(1,1,2,8), NA), \\\\n\\\", \\\"incomparable = c(TRUE, FALSE, NA)), expect.error = list(x = list(FALSE, FALSE, TRUE), \\\\n\\\", \\\"incomparable = c(FALSE, FALSE, TRUE)))\\\\n\\\", \\\"\\\\n\\\", \\\"arg_test(fun = \\\\\\\"unique\\\\\\\", arg = c(\\\\\\\"x\\\\\\\", \\\\\\\"incomparables\\\\\\\"), \\\\n\\\", \\\"val = list(x = list(1:10, c(1,1,2,8), NA), incomparable = c(TRUE, FALSE, NA)), \\\\n\\\", \\n        \\\"expect.error = list(x = list(FALSE, FALSE, TRUE), incomparable = c(FALSE, FALSE, TRUE)), \\\\n\\\", \\\"export = TRUE, res.path = getwd())\\\\n\\\", \\\"\\\\n\\\", \\\"# Return an error if you run this example\\\\n\\\", \\\"# arg_test(fun = \\\\\\\"round\\\\\\\", arg = c(\\\\\\\"data\\\\\\\", \\\\\\\"dec.nb\\\\\\\", \\\\\\\"after.lead.zero\\\\\\\"), val = list(L1 = list(c(1, 1.0002256, 1.23568), \\\\\\\"a\\\\\\\", NA), L2 = list(2, c(1,3), NA), L3 = c(TRUE, FALSE, NA)))\\\\n\\\", \\\"\\\\n\\\", \\\"arg_test(fun = \\\\\\\"plot\\\\\\\", arg = c(\\\\\\\"x\\\\\\\", \\\\\\\"y\\\\\\\"), val = list(x = list(1:10, 12:13, NA, (1:10)^2), \\\\n\\\", \\\"y = list(1:10, NA, NA)),  expect.error = list(x = list(FALSE, TRUE, TRUE, FALSE), \\\\n\\\", \\n        \\\"y = list(FALSE, TRUE, TRUE)), parall = FALSE, thread.nb = NULL, plot.fun = TRUE, \\\\n\\\", \\\"res.path = \\\\\\\".\\\\\\\", lib.path = NULL)\\\\n\\\", \\\"\\\\n\\\", \\\"arg_test(fun = \\\\\\\"plot\\\\\\\", arg = c(\\\\\\\"x\\\\\\\", \\\\\\\"y\\\\\\\"), val = list(x = list(1:10, 12:13, NA, \\\\n\\\", \\\"(1:10)^2), y = list(1:10, NA, NA)), parall = FALSE, thread.nb = 4, \\\\n\\\", \\\"plot.fun = TRUE, res.path = \\\\\\\".\\\\\\\", \\\\n\\\", \\\"lib.path = NULL)\\\\n\\\", \\\"\\\\n\\\", \\\"# set.seed(1) ; \\\\n\\\", \\\"# obs1 <- data.frame(Time = c(rnorm(10), rnorm(10) + 2), Group1 = rep(c(\\\\\\\"G\\\\\\\", \\\\\\\"H\\\\\\\"), each = 10), \\\\n\\\", \\n        \\\"# stringsAsFactors = TRUE) ; arg_test(fun = \\\\\\\"fun_gg_boxplot\\\\\\\", arg = c(\\\\\\\"data1\\\\\\\", \\\\\\\"y\\\\\\\", \\\\\\\"categ\\\\\\\"), \\\\n\\\", \\\"# val = list(L1 = list(L1 = obs1), L2 = list(L1 = \\\\\\\"Time\\\\\\\"), L3 = list(L1 = \\\\\\\"Group1\\\\\\\")))\\\\n\\\", \\\"\\\\n\\\", \\\"# set.seed(1) ; \\\\n\\\", \\\"# obs1 <- data.frame(Time = c(rnorm(10), rnorm(10) + 2), Group1 = rep(c(\\\\\\\"G\\\\\\\", \\\\\\\"H\\\\\\\"), each = 10), \\\\n\\\", \\\"# stringsAsFactors = TRUE) ; \\\\n\\\", \\\"# arg_test(fun = \\\\\\\"fun_gg_boxplot\\\\\\\", arg = c(\\\\\\\"data1\\\\\\\", \\\\\\\"y\\\\\\\", \\\\\\\"categ\\\\\\\"), val = list(L1 = list(obs1), \\\\n\\\", \\\"# L2 = \\\\\\\"Time\\\\\\\", L3 = \\\\\\\"Group1\\\\\\\"), parall = FALSE, thread.nb = NULL, plot.fun = TRUE, \\\\n\\\", \\n        \\\"# res.path = \\\\\\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\Desktop\\\\\\\\\\\\\\\", lib.path = \\\\\\\"C:\\\\\\\\Program Files\\\\\\\\R\\\\\\\\R-4.3.1\\\\\\\\library\\\\\\\\\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"# library(ggplot2) ; arg_test(fun = \\\\\\\"geom_histogram\\\\\\\", arg = c(\\\\\\\"data\\\\\\\", \\\\\\\"mapping\\\\\\\"), \\\\n\\\", \\\"# val = list(x = list(data.frame(X = \\\\\\\"a\\\\\\\", stringsAsFactors = TRUE)), \\\\n\\\", \\\"# y = list(ggplot2::aes(x = X))), parall = FALSE, thread.nb = NULL, \\\\n\\\", \\\"# plot.fun = TRUE, res.path = \\\\\\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\Desktop\\\\\\\\\\\\\\\", \\\\n\\\", \\\"# lib.path = \\\\\\\"C:\\\\\\\\Program Files\\\\\\\\R\\\\\\\\R-4.3.1\\\\\\\\library\\\\\\\\\\\\\\\") \\\\n\\\", \\\"# BEWARE: ggplot2::geom_histogram does not work\\\\n\\\"), \\n    \\\"\\\\n\\\"), env_check.Rd = list(\\\"% Generated by roxygen2: do not edit by hand\\\", \\\"\\\\n\\\", \\\"% Please edit documentation in R/env_check.R\\\", \\\"\\\\n\\\", list(\\\"env_check\\\"), \\\"\\\\n\\\", list(\\\"env_check\\\"), \\\"\\\\n\\\", list(\\\"env_check\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"env_check(pos = 1, name = NULL)\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", list(list(\\\"pos\\\"), list(\\\"Single non nul positive integer indicating the position of the environment checked (argument n of the parent.frame() function). Value 1 means one step above the env_check() local environment (by default). This means that when env_check(pos = 1) is used inside a function A, it checks if the name of any object in the local environment of this function A is also present in above environments, following R Scope, starting by the just above environment. When env_check(pos = 1) is used in the working (Global) environment (named .GlobalEnv), it checks the object names of this .GlobalEnv environment, in the above environments. See the examples below.\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"name\\\"), list(\\\"Single character string indicating a string that will be added in the output string, for instance the name of a function inside which env_check() is used.\\\")), \\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"A character string indicating the object names of the tested environment that match object names in the above environments, following the R scope, or NULL if no match.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"Verify that object names in the environment defined by the pos parameter are identical or not to object names in the above environments (following R Scope). This can be used to verify that names used for objects inside a function or in the working environment do not override names of objects already present in the above R environments, following the R scope.\\\\n\\\"), \\n    \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"# Example in the working environment\\\\n\\\", \\\"\\\\n\\\", \\\"mean <- 1 \\\\n\\\", \\\"# creation of the object mean with value 1 in the .GlobalEnv environment, \\\\n\\\", \\\"# knowing that the mean() function also exists in the environment base, above .GlobalEnv.\\\\n\\\", \\\"t.test <- 1 \\\\n\\\", \\\"# creation of the object t.test with value 1 in the .GlobalEnv environment, \\\\n\\\", \\\"# knowing that the t.test() function also exists in the environment stats, above .GlobalEnv.\\\\n\\\", \\\"search() \\\\n\\\", \\\"# current R scope (order of the successive R environments).\\\\n\\\", \\n        \\\"utils::find(\\\\\\\"mean\\\\\\\") \\\\n\\\", \\\"# where the objects with the name \\\\\\\"mean\\\\\\\" are present.\\\\n\\\", \\\"utils::find(\\\\\\\"t.test\\\\\\\") \\\\n\\\", \\\"# where the objects with the name \\\\\\\"mean\\\\\\\" are present.\\\\n\\\", \\\"a <- env_check(pos = 1) \\\\n\\\", \\\"# test if any object name of the global environment are above environments \\\\n\\\", \\\"# (or env_check(), as pos = 1 is the default value).\\\\n\\\", \\\"a # the output string of sec().\\\\n\\\", \\\"cat(a) # the evaluated output.\\\\n\\\", \\\"env_check(pos = 2) \\\\n\\\", \\\"# test if any object of the stats environment (one step above .GlobalEnv) \\\\n\\\", \\n        \\\"# are above environments. Returns NULL since no object names of stats are in above environments\\\\n\\\", \\\"\\\\n\\\", \\\"\\\\n\\\", \\\"# Example inside a function\\\\n\\\", \\\"\\\\n\\\", \\\"fun1 <- function(){t.test <- 0 ; mean <- 5 ; env_check(pos = 1)} \\\\n\\\", \\\"# env_check() will check if the object names inside the fun1 function \\\\n\\\", \\\"# exist in the .GlobalEnv environment and above.\\\\n\\\", \\\"fun1()\\\\n\\\", \\\"fun2 <- function(){t.test <- 0 ; mean <- 5 ; env_check(pos = 2)} \\\\n\\\", \\\"# env_check() will check if the object names inside the fun2 function \\\\n\\\", \\n        \\\"# exist in the stats environment and above.\\\\n\\\", \\\"fun2()\\\\n\\\", \\\"fun3 <- function(){t.test <- 0 ; mean <- 5 ; env_check(pos = 2, name = \\\\\\\"fun3\\\\\\\")} \\\\n\\\", \\\"# idem fun2() but with the name of the function fun2 indicated. \\\\n\\\", \\\"# Instead of writting name = \\\\\\\"fun3\\\\\\\", \\\\n\\\", \\\"# we can also use name = as.character(sys.calls()[[length(sys.calls())]]), \\\\n\\\", \\\"# as sys.calls() gives the function name at top stack of the imbricated functions, \\\\n\\\", \\\"# sys.calls()[[length(sys.calls())]] the name of the just above function. \\\\n\\\", \\n        \\\"# This can also been used for the above function: as.character(sys.call(1))\\\\n\\\", \\\"fun3()\\\\n\\\", \\\"test.pos <- 1\\\\n\\\", \\\"env_check(pos = test.pos, \\\\n\\\", \\\"name = if(length(sys.calls()) >= test.pos)\\\\n\\\", \\\"{as.character(sys.calls()[[length(sys.calls()) + 1 - test.pos]])}\\\\n\\\", \\\"else{search()[ (1:length(search()))[test.pos - length(sys.calls())]]}) \\\\n\\\", \\\"# here is a way to have the name of the tested environment according to test.pos value\\\\n\\\"), \\\"\\\\n\\\"), get_message.Rd = list(\\\"% Generated by roxygen2: do not edit by hand\\\", \\n    \\\"\\\\n\\\", \\\"% Please edit documentation in R/get_message.R\\\", \\\"\\\\n\\\", list(\\\"get_message\\\"), \\\"\\\\n\\\", list(\\\"get_message\\\"), \\\"\\\\n\\\", list(\\\"get_message\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"get_message(\\\\n\\\", \\\"  data,\\\\n\\\", \\\"  kind = \\\\\\\"error\\\\\\\",\\\\n\\\", \\\"  header = TRUE,\\\\n\\\", \\\"  print.no = FALSE,\\\\n\\\", \\\"  text = NULL,\\\\n\\\", \\\"  env = NULL\\\\n\\\", \\\")\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", list(list(\\\"data\\\"), list(\\\"Single character string to evaluate.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"kind\\\"), list(\\\"Single character string. Either \\\\\\\"error\\\\\\\" to get error messages, or \\\\\\\"warning\\\\\\\" to get warning messages, or \\\\\\\"message\\\\\\\" to get non error and non warning messages.\\\")), \\n        \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"header\\\"), list(\\\"Single logical value. Add a header in the returned message?\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"print.no\\\"), list(\\\"Single logical value. Print a message saying that no message reported?\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"text\\\"), list(\\\"Single character string added to the output message (even if no message exists and print.no is TRUE). Inactivated if the header argument is FALSE. Write NULL if not required.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"env\\\"), list(\\\"The name of an existing environment. Write NULL if not required.\\\")), \\n        \\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"The message or NULL if no message and print.no is FALSE.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"Evaluate an instruction written between \\\\\\\"\\\\\\\" and return the first of the error, or warning or standard (non error non warning) messages if ever exist.\\\\n\\\", \\\"\\\\n\\\", \\\"Using argument print.no = FALSE, return NULL if no message, which is convenient in some cases.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"WARNINGS\\\\n\\\", \\\"\\\\n\\\", \\\"Only the first message is returned.\\\\n\\\", \\\"\\\\n\\\", \\\"Always use the env argument when get_message() is used inside functions.\\\\n\\\", \\n        \\\"\\\\n\\\", \\\"The function does not prevent printing if print() is used inside the instruction tested. To prevent that, use tempo <- utils::capture.output(error <- get_message(data = \\\\\\\"arg_check(data = 'a', class = mean, neg.values = FALSE, print = TRUE)\\\\\\\")). The return of get_message() is assigned into error and the printed messages are captured by utils::capture.output() and assigned into tempo. See the examples.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"get_message(data = \\\\\\\"wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)\\\\\\\", kind = \\\\\\\"error\\\\\\\", \\\\n\\\", \\n        \\\"print.no = TRUE, text = \\\\\\\"IN A\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"get_message(data = \\\\\\\"wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)\\\\\\\", kind = \\\\\\\"warning\\\\\\\", \\\\n\\\", \\\"print.no = TRUE, text = \\\\\\\"IN A\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"get_message(data = \\\\\\\"wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)\\\\\\\", kind = \\\\\\\"message\\\\\\\", \\\\n\\\", \\\"print.no = TRUE, text = \\\\\\\"IN A\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"get_message(data = \\\\\\\"wilcox.test()\\\\\\\", kind = \\\\\\\"error\\\\\\\", print.no = TRUE, text = \\\\\\\"IN A\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"get_message(data = \\\\\\\"sum(1)\\\\\\\", kind = \\\\\\\"error\\\\\\\", print.no = TRUE, text = \\\\\\\"IN A\\\\\\\")\\\\n\\\", \\n        \\\"\\\\n\\\", \\\"get_message(data = \\\\\\\"message('ahah')\\\\\\\", kind = \\\\\\\"error\\\\\\\", print.no = TRUE, text = \\\\\\\"IN A\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"get_message(data = \\\\\\\"message('ahah')\\\\\\\", kind = \\\\\\\"message\\\\\\\", print.no = TRUE, text = \\\\\\\"IN A\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"get_message(data = \\\\\\\"ggplot(data = data.frame(X = 1:10, stringsAsFactors = TRUE), \\\\n\\\", \\\"mapping = aes(x = X)) + geom_histogram()\\\\\\\", kind = \\\\\\\"message\\\\\\\", print.no = TRUE, \\\\n\\\", \\\"text = \\\\\\\"IN FUNCTION 1\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"set.seed(1) ; \\\\n\\\", \\\"obs1 <- data.frame(Time = c(rnorm(10), rnorm(10) + 2), \\\\n\\\", \\n        \\\"Group1 = rep(c(\\\\\\\"G\\\\\\\", \\\\\\\"H\\\\\\\"), each = 10), stringsAsFactors = TRUE) ; \\\\n\\\", \\\"get_message(data = 'gg_boxplot(data = obs1, y = \\\\\\\"Time\\\\\\\", categ = \\\\\\\"Group1\\\\\\\")', \\\\n\\\", \\\"kind = \\\\\\\"message\\\\\\\", print.no = TRUE, text = \\\\\\\"IN FUNCTION 1\\\\\\\")\\\\n\\\", \\\"\\\\n\\\"), \\\"\\\\n\\\"), internal_function.Rd = list(\\\"% Generated by roxygen2: do not edit by hand\\\", \\\"\\\\n\\\", \\\"% Please edit documentation in R/internal_functions.R\\\", \\\"\\\\n\\\", list(\\\".pack_and_function_check\\\"), \\\"\\\\n\\\", list(\\\".pack_and_function_check\\\"), \\\"\\\\n\\\", list(\\\".base_function_check\\\"), \\n    \\\"\\\\n\\\", list(\\\".pack_and_function_check\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\".pack_and_function_check(fun, lib.path, external.function.name)\\\\n\\\", \\\"\\\\n\\\", \\\".base_function_check(external.function.name)\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", list(list(\\\"fun\\\"), list(\\\"Character vector of the names of the required functions, preceded by the name of the package they belong to and a double colon. Example: c(\\\\\\\"ggplot2::geom_point\\\\\\\", \\\\\\\"grid::gpar\\\\\\\").\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"lib.path\\\"), list(\\\"Character vector specifying the absolute pathways of the directories containing the listed packages in the fun argument, if not in the default directories. If NULL, the function checks only in the .libPaths() default R library folders.\\\")), \\n        \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"external.function.name\\\"), list(\\\"Name of the function using the .pack_and_function_check() function.\\\")), \\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"An error message if at least one of the checked packages is missing in lib.path, or if at least one of the checked functions is missing in the required package, nothing otherwise.\\\\n\\\", \\\"\\\\n\\\", \\\"An error message if at least one of the checked operator is present in the R scope, nothing otherwise.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"Check if 1) required functions are present in required packages and 2) required packages are installed locally.\\\\n\\\", \\n        \\\"\\\\n\\\", \\\"Check if critical operators of R are not present in other packages or in the global env.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"# .pack_and_function_check(fun = \\\\\\\"ggplot2::notgood\\\\\\\", lib.path = .libPaths(), external.function.name = \\\\\\\"fun1\\\\\\\") # commented because this example returns an error\\\\n\\\", list(\\\"\\\\n\\\", \\\"# Example that shouldn't be run because this is an internal function\\\\n\\\", \\\".pack_and_function_check(fun = c(\\\\\\\"ggplot2::geom_point\\\\\\\", \\\\\\\"grid::gpar\\\\\\\"), lib.path = .libPaths(), external.function.name = \\\\\\\"fun1\\\\\\\")\\\\n\\\"), \\n        \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"# Example that shouldn't be run because this is an internal function\\\\n\\\", \\\".base_function_check(external.function.name = \\\\\\\"fun1\\\\\\\") # commented because this example returns an error\\\\n\\\"), \\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"internal\\\"), \\\"\\\\n\\\"), is_function_here.Rd = list(\\\"% Generated by roxygen2: do not edit by hand\\\", \\\"\\\\n\\\", \\\"% Please edit documentation in R/is_function_here.R\\\", \\\"\\\\n\\\", list(\\\"is_function_here\\\"), \\\"\\\\n\\\", list(\\\"is_function_here\\\"), \\\"\\\\n\\\", list(\\\"is_function_here\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"is_function_here(fun, lib.path = NULL)\\\\n\\\"), \\n    \\\"\\\\n\\\", list(\\\"\\\\n\\\", list(list(\\\"fun\\\"), list(\\\"Character vector of the names of the required functions, preceded by the name of the package they belong to and a double colon. Example: c(\\\\\\\"ggplot2::geom_point\\\\\\\", \\\\\\\"grid::gpar\\\\\\\"). Warning: do not write \\\\\\\"()\\\\\\\" at the end of the function\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"lib.path\\\"), list(\\\"Character vector specifying the absolute pathways of the directories containing the listed packages in the fun argument, if not in the default directories. Ignored if NULL.\\\")), \\n        \\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"An error message if at least one of the checked packages is missing in lib.path, or if at least one of the checked functions is missing in the required package, nothing otherwise.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"Check if required functions are present in installed packages. This controls modifications in of function names package versions.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"# is_function_here(fun = \\\\\\\"ggplot2::notgood\\\\\\\") # commented because this example returns an error\\\\n\\\", \\\"is_function_here(fun = c(\\\\\\\"ggplot2::geom_point\\\\\\\", \\\\\\\"grid::gpar\\\\\\\"))\\\\n\\\"), \\n    \\\"\\\\n\\\"), is_package_here.Rd = list(\\\"% Generated by roxygen2: do not edit by hand\\\", \\\"\\\\n\\\", \\\"% Please edit documentation in R/is_package_here.R\\\", \\\"\\\\n\\\", list(\\\"is_package_here\\\"), \\\"\\\\n\\\", list(\\\"is_package_here\\\"), \\\"\\\\n\\\", list(\\\"is_package_here\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"is_package_here(req.package, lib.path = NULL)\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", list(list(\\\"req.package\\\"), list(\\\"Character vector of package names to check.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"lib.path\\\"), list(\\\"Character vector specifying the absolute pathways of the directories containing the listed packages in the req.package argument, if not in the default directories. If NULL, the function checks only in the .libPaths() default R library folders.\\\")), \\n    \\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"An error message if at least one of the checked packages is missing in lib.path, nothing otherwise.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"Check if required packages are installed locally.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"# is_package_here(req.package = \\\\\\\"nopackage\\\\\\\") # commented because this example returns an error\\\\n\\\", \\\"is_package_here(req.package = \\\\\\\"ggplot2\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"# is_package_here(req.package = \\\\\\\"ggplot2\\\\\\\", lib.path = \\\\\\\"C:/Users/yhan/AppData/Local/R/win-library/4.3\\\\\\\") \\\\n\\\", \\\"# commented because this example returns an error if the lib.path argument is not an existing directory\\\\n\\\"), \\n    \\\"\\\\n\\\"), is_python_package_here.Rd = list(\\\"% Generated by roxygen2: do not edit by hand\\\", \\\"\\\\n\\\", \\\"% Please edit documentation in R/is_python_package_here.R\\\", \\\"\\\\n\\\", list(\\\"is_python_package_here\\\"), \\\"\\\\n\\\", list(\\\"is_python_package_here\\\"), \\\"\\\\n\\\", list(\\\"is_python_package_here\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"is_python_package_here(\\\\n\\\", \\\"  req.package,\\\\n\\\", \\\"  python.exec.path = NULL,\\\\n\\\", \\\"  python.lib.path = NULL,\\\\n\\\", \\\"  lib.path = NULL\\\\n\\\", \\\")\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", list(list(\\\"req.package\\\"), list(\\\"Character vector of package names to import.\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"python.exec.path\\\"), list(\\\"Single optional character vector specifying the absolute pathways of the executable python file to use (associated to the packages to use). If NULL, the reticulate::import_from_path() function used in is_python_package_here() seeks for an available version of python.exe, and then uses python_config(python_version, required_module, python_versions). But might not be the correct one for the python.lib.path parameter specified. Thus, it is recommanded to do not leave NULL, notably when using computing clusters.\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"python.lib.path\\\"), list(\\\"Optional character vector specifying the absolute pathways of the directories containing some of the listed packages in the req.package argument, if not in the default directories.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"lib.path\\\"), list(\\\"Absolute path of the reticulate packages, if not in the default folders.\\\")), \\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"An error message if at least one of the checked packages is missing in python.lib.path, nothing otherwise.\\\\n\\\"), \\\"\\\\n\\\", list(\\n    \\\"\\\\n\\\", \\\"Check if the specified python packages are installed locally.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"WARNINGS\\\\n\\\", \\\"\\\\n\\\", \\\"for python 3.7. Previous versions return an error \\\\\\\"Error in sys$stdout$flush() : attempt to apply non-function\\\\\\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"# example of error message\\\\n\\\", \\\"\\\\n\\\", \\\"# is_python_package_here(req.package = \\\\\\\"nopackage\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"\\\\n\\\", \\\"# commented because this example returns an error if the python package is not installed on the computer\\\\n\\\", \\\"# (require the installation of the python serpentine package \\\\n\\\", \\n    \\\"# from https://github.com/koszullab/serpentine\\\\n\\\", \\\"\\\\n\\\", \\\"# is_python_package_here(req.package = \\\\\\\"serpentine\\\\\\\")\\\\n\\\", \\\"\\\\n\\\", \\\"\\\\n\\\", \\\"# another example of error message\\\\n\\\", \\\"\\\\n\\\", \\\"# is_python_package_here(req.package = \\\\\\\"serpentine\\\\\\\", python.lib.path = \\\\\\\"blablabla\\\\\\\")\\\\n\\\"), \\\"\\\\n\\\"), report.Rd = list(\\\"% Generated by roxygen2: do not edit by hand\\\", \\\"\\\\n\\\", \\\"% Please edit documentation in R/report.R\\\", \\\"\\\\n\\\", list(\\\"report\\\"), \\\"\\\\n\\\", list(\\\"report\\\"), \\\"\\\\n\\\", list(\\\"report\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"report(\\\\n\\\", \\\"  data,\\\\n\\\", \\n    \\\"  output = \\\\\\\"results.txt\\\\\\\",\\\\n\\\", \\\"  path,\\\\n\\\", \\\"  overwrite = FALSE,\\\\n\\\", \\\"  rownames.kept = FALSE,\\\\n\\\", \\\"  vector.cat = FALSE,\\\\n\\\", \\\"  noquote = TRUE,\\\\n\\\", \\\"  sep = 2\\\\n\\\", \\\")\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", list(list(\\\"data\\\"), list(\\\"Object to print in the output file. If NULL, nothing is done, with no warning.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"output\\\"), list(\\\"Single character string. Name of the output file.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"path\\\"), list(\\\"Location of the output file.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"overwrite\\\"), \\n    list(\\\"Single logical value. If output file already exists, defines if the printing is appended (default FALSE) or if the output file content is erased before printing (TRUE).\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"rownames.kept\\\"), list(\\\"Single logical value. Defines whether row names have to be removed or not in small tables (less than length.rows rows).\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"vector.cat\\\"), list(\\\"Single logical value. If TRUE print a vector of length > 1 using cat() instead of capture.output(). Otherwise (default FALSE) the opposite.\\\")), \\n    \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"noquote\\\"), list(\\\"Single logical value. If TRUE no quote are present for the characters.\\\")), \\\"\\\\n\\\", \\\"\\\\n\\\", list(list(\\\"sep\\\"), list(\\\"Single integer representing the number of empty lines after printed data.\\\")), \\\"\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"Nothing.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"Log file function: print a character string or a data object into a same output file.\\\\n\\\"), \\\"\\\\n\\\", list(\\\"\\\\n\\\", \\\"#report()\\\\n\\\", \\\"report(data = 1:3, output = \\\\\\\"results.txt\\\\\\\", path = \\\\\\\".\\\\\\\", overwrite = TRUE, \\\\n\\\", \\\"rownames.kept = FALSE, vector.cat = FALSE, noquote = FALSE, sep = 2)\\\\n\\\"), \\n    \\\"\\\\n\\\")), source = list(arg_check.Rd = \\\"R/arg_check.R\\\", arg_test.Rd = \\\"R/arg_test.R\\\", env_check.Rd = \\\"R/env_check.R\\\", get_message.Rd = \\\"R/get_message.R\\\", internal_function.Rd = \\\"R/internal_functions.R\\\", is_function_here.Rd = \\\"R/is_function_here.R\\\", is_package_here.Rd = \\\"R/is_package_here.R\\\", is_python_package_here.Rd = \\\"R/is_python_package_here.R\\\", report.Rd = \\\"R/report.R\\\"), keywords = list(character(0), character(0), character(0), character(0), \\\"internal\\\", character(0), character(0), character(0), \\n    character(0)), concepts = list(character(0), character(0), character(0), character(0), character(0), character(0), character(0), character(0), character(0)), internal = c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)), tutorials = list(name = character(0), file_out = character(0), title = character(0), pagetitle = character(0), url = character(0)), vignettes = list(name = c(\\\"articles/arg_check\\\", \\\"articles/arg_test\\\", \\\"articles/env_check\\\", \\\"articles/get_message\\\", \\\"articles/is_function_here\\\", \\n\\\"articles/is_package_here\\\", \\\"articles/is_python_package_here\\\", \\\"articles/report\\\", \\\"saferDev\\\"), file_in = c(\\\"vignettes/articles/arg_check.Rmd\\\", \\\"vignettes/articles/arg_test.Rmd\\\", \\\"vignettes/articles/env_check.Rmd\\\", \\\"vignettes/articles/get_message.Rmd\\\", \\\"vignettes/articles/is_function_here.Rmd\\\", \\\"vignettes/articles/is_package_here.Rmd\\\", \\\"vignettes/articles/is_python_package_here.Rmd\\\", \\\"vignettes/articles/report.Rmd\\\", \\\"vignettes/saferDev.Rmd\\\"), file_out = c(\\\"articles/arg_check.html\\\", \\\"articles/arg_test.html\\\", \\n\\\"articles/env_check.html\\\", \\\"articles/get_message.html\\\", \\\"articles/is_function_here.html\\\", \\\"articles/is_package_here.html\\\", \\\"articles/is_python_package_here.html\\\", \\\"articles/report.html\\\", \\\"articles/saferDev.html\\\"), title = c(\\\"arg_check\\\", \\\"arg_test\\\", \\\"env_check\\\", \\\"get_message\\\", \\\"is_function_here\\\", \\\"is_package_here\\\", \\\"is_python_package_here\\\", \\\"report\\\", \\\"saferDev\\\"), description = c(NA, NA, NA, NA, NA, NA, NA, NA, NA), depth = c(1, 1, 1, 1, 1, 1, 1, 1, 1)), bs_version = 5, prefix = \\\"\\\"), examples = TRUE, \\n    run_dont_run = FALSE, seed = 1014, lazy = FALSE, override = list(), install = FALSE, preview = FALSE, new_process = FALSE, devel = FALSE, cli_colors = 256, pkgdown_internet = TRUE)), envir = base::quote(<environment>), quote = base::quote(TRUE)): envir\\ndo.call(do.call, c(readRDS(\\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\Rtmp0I9XwE\\\\\\\\callr-fun-2c7c192a3a23\\\"), list(envir = .GlobalEnv, quote = TRUE)), envir = .GlobalEnv, quote = TRUE): envir\\nwithCallingHandlers({\\n    NULL\\n    saveRDS(do.call(do.call, c(readRDS(\\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\Rtmp0I9XwE\\\\\\\\callr-fun-2c7c192a3a23\\\"), list(envir = .GlobalEnv, quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\Rtmp0I9XwE\\\\\\\\callr-res-2c7c620b6ac9\\\", compress = FALSE)\\n    flush(stdout())\\n    flush(stderr())\\n    NULL\\n    invisible()\\n}, error = function(e) {\\n    {\\n        callr_data <- as.environment(\\\"tools:callr\\\")$`__callr_data__`\\n        err <- callr_data$err\\n        if (FALSE) {\\n            assign(\\\".Traceback\\\", .traceback(4), envir = callr_data)\\n            dump.frames(\\\"__callr_dump__\\\")\\n            assign(\\\".Last.dump\\\", .GlobalEnv$`__callr_dump__`, envir = callr_data)\\n            rm(\\\"__callr_dump__\\\", envir = .GlobalEnv)\\n        }\\n        e <- err$process_call(e)\\n        e2 <- err$new_error(\\\"error in callr subprocess\\\")\\n        class(e2) <- c(\\\"callr_remote_error\\\", class(e2))\\n        e2 <- err$add_trace_back(e2)\\n        cut <- which(e2$trace$scope == \\\"global\\\")[1]\\n        if (!is.na(cut)) {\\n            e2$trace <- e2$trace[-(1:cut), ]\\n        }\\n        saveRDS(list(\\\"error\\\", e2, e), file = paste0(\\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\Rtmp0I9XwE\\\\\\\\callr-res-2c7c620b6ac9\\\", \\\".error\\\"))\\n    }\\n}, interrupt = function(e) {\\n    {\\n        callr_data <- as.environment(\\\"tools:callr\\\")$`__callr_data__`\\n        err <- callr_data$err\\n        if (FALSE) {\\n            assign(\\\".Traceback\\\", .traceback(4), envir = callr_data)\\n            dump.frames(\\\"__callr_dump__\\\")\\n            assign(\\\".Last.dump\\\", .GlobalEnv$`__callr_dump__`, envir = callr_data)\\n            rm(\\\"__callr_dump__\\\", envir = .GlobalEnv)\\n        }\\n        e <- err$process_call(e)\\n        e2 <- err$new_error(\\\"error in callr subprocess\\\")\\n        class(e2) <- c(\\\"callr_remote_error\\\", class(e2))\\n        e2 <- err$add_trace_back(e2)\\n        cut <- which(e2$trace$scope == \\\"global\\\")[1]\\n        if (!is.na(cut)) {\\n            e2$trace <- e2$trace[-(1:cut), ]\\n        }\\n        saveRDS(list(\\\"error\\\", e2, e), file = paste0(\\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\Rtmp0I9XwE\\\\\\\\callr-res-2c7c620b6ac9\\\", \\\".error\\\"))\\n    }\\n}, callr_message = function(e) {\\n    try(signalCondition(e))\\n}): expr\\ndoTryCatch(return(expr), name, parentenv, handler): expr\\ntryCatchOne(expr, names, parentenv, handlers[[1]]): expr\\ntryCatchList(expr, names[-nh], parentenv, handlers[-nh]): expr\\ndoTryCatch(return(expr), name, parentenv, handler): expr\\ntryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), names[nh], parentenv, handlers[[nh]]): expr\\ntryCatchList(expr, classes, parentenv, handlers): expr\\ntryCatch(withCallingHandlers({\\n    NULL\\n    saveRDS(do.call(do.call, c(readRDS(\\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\Rtmp0I9XwE\\\\\\\\callr-fun-2c7c192a3a23\\\"), list(envir = .GlobalEnv, quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\Rtmp0I9XwE\\\\\\\\callr-res-2c7c620b6ac9\\\", compress = FALSE)\\n    flush(stdout())\\n    flush(stderr())\\n    NULL\\n    invisible()\\n}, error = function(e) {\\n    {\\n        callr_data <- as.environment(\\\"tools:callr\\\")$`__callr_data__`\\n        err <- callr_data$err\\n        if (FALSE) {\\n            assign(\\\".Traceback\\\", .traceback(4), envir = callr_data)\\n            dump.frames(\\\"__callr_dump__\\\")\\n            assign(\\\".Last.dump\\\", .GlobalEnv$`__callr_dump__`, envir = callr_data)\\n            rm(\\\"__callr_dump__\\\", envir = .GlobalEnv)\\n        }\\n        e <- err$process_call(e)\\n        e2 <- err$new_error(\\\"error in callr subprocess\\\")\\n        class(e2) <- c(\\\"callr_remote_error\\\", class(e2))\\n        e2 <- err$add_trace_back(e2)\\n        cut <- which(e2$trace$scope == \\\"global\\\")[1]\\n        if (!is.na(cut)) {\\n            e2$trace <- e2$trace[-(1:cut), ]\\n        }\\n        saveRDS(list(\\\"error\\\", e2, e), file = paste0(\\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\Rtmp0I9XwE\\\\\\\\callr-res-2c7c620b6ac9\\\", \\\".error\\\"))\\n    }\\n}, interrupt = function(e) {\\n    {\\n        callr_data <- as.environment(\\\"tools:callr\\\")$`__callr_data__`\\n        err <- callr_data$err\\n        if (FALSE) {\\n            assign(\\\".Traceback\\\", .traceback(4), envir = callr_data)\\n            dump.frames(\\\"__callr_dump__\\\")\\n            assign(\\\".Last.dump\\\", .GlobalEnv$`__callr_dump__`, envir = callr_data)\\n            rm(\\\"__callr_dump__\\\", envir = .GlobalEnv)\\n        }\\n        e <- err$process_call(e)\\n        e2 <- err$new_error(\\\"error in callr subprocess\\\")\\n        class(e2) <- c(\\\"callr_remote_error\\\", class(e2))\\n        e2 <- err$add_trace_back(e2)\\n        cut <- which(e2$trace$scope == \\\"global\\\")[1]\\n        if (!is.na(cut)) {\\n            e2$trace <- e2$trace[-(1:cut), ]\\n        }\\n        saveRDS(list(\\\"error\\\", e2, e), file = paste0(\\\"C:\\\\\\\\Users\\\\\\\\yhan\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp\\\\\\\\Rtmp0I9XwE\\\\\\\\callr-res-2c7c620b6ac9\\\", \\\".error\\\"))\\n    }\\n}, callr_message = function(e) {\\n    try(signalCondition(e))\\n}), error = function(e) {\\n    NULL\\n    if (FALSE) {\\n        try(stop(e))\\n    }\\n    else {\\n        invisible()\\n    }\\n}, interrupt = function(e) {\\n    NULL\\n    if (FALSE) {\\n        e\\n    }\\n    else {\\n        invisible()\\n    }\\n}): expr\\n\" # test if any object of the stats environment (one step above .GlobalEnv)  # are above environments. Returns NULL since no object names of stats are in above environments   # Example inside a function  fun1 <- function(){t.test <- 0 ; mean <- 5 ; env_check(pos = 1)}  # env_check() will check if the object names inside the fun1 function  # exist in the .GlobalEnv environment and above. fun1() #> [1] \"SOME VARIABLES OF THE CHECKED ENVIRONMENT ARE ALSO PRESENT IN :\\neval(expr, envir, enclos): mean t.test\\npackage:stats: t.test\\npackage:base: mean\\n\" fun2 <- function(){t.test <- 0 ; mean <- 5 ; env_check(pos = 2)}  # env_check() will check if the object names inside the fun2 function  # exist in the stats environment and above. fun2() #> [1] \"SOME VARIABLES OF THE CHECKED ENVIRONMENT ARE ALSO PRESENT IN :\\npackage:stats: t.test\\npackage:base: mean\\n\" fun3 <- function(){t.test <- 0 ; mean <- 5 ; env_check(pos = 2, name = \"fun3\")}  # idem fun2() but with the name of the function fun2 indicated.  # Instead of writting name = \"fun3\",  # we can also use name = as.character(sys.calls()[[length(sys.calls())]]),  # as sys.calls() gives the function name at top stack of the imbricated functions,  # sys.calls()[[length(sys.calls())]] the name of the just above function.  # This can also been used for the above function: as.character(sys.call(1)) fun3() #> [1] \"SOME VARIABLES OF fun3 ARE ALSO PRESENT IN :\\npackage:stats: t.test\\npackage:base: mean\\n\" test.pos <- 1 env_check(pos = test.pos,  name = if(length(sys.calls()) >= test.pos) {as.character(sys.calls()[[length(sys.calls()) + 1 - test.pos]])} else{search()[ (1:length(search()))[test.pos - length(sys.calls())]]})  #> [1] \"SOME VARIABLES OF eval ARE ALSO PRESENT IN :\\npackage:stats: t.test\\npackage:base: mean\\n\" # here is a way to have the name of the tested environment according to test.pos value"},{"path":"/reference/get_message.html","id":null,"dir":"Reference","previous_headings":"","what":"get_message — get_message","title":"get_message — get_message","text":"Evaluate instruction written \"\" return first error, warning standard (non error non warning) messages ever exist. Using argument print.= FALSE, return NULL message, convenient cases.","code":""},{"path":"/reference/get_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_message — get_message","text":"","code":"get_message(   data,   kind = \"error\",   header = TRUE,   print.no = FALSE,   text = NULL,   env = NULL )"},{"path":"/reference/get_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_message — get_message","text":"data Single character string evaluate. kind Single character string. Either \"error\" get error messages, \"warning\" get warning messages, \"message\" get non error non warning messages. header Single logical value. Add header returned message? print.Single logical value. Print message saying message reported? text Single character string added output message (even message exists print.TRUE). Inactivated header argument FALSE. Write NULL required. env name existing environment. Write NULL required.","code":""},{"path":"/reference/get_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_message — get_message","text":"message NULL message print.FALSE.","code":""},{"path":"/reference/get_message.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_message — get_message","text":"WARNINGS first message returned. Always use env argument get_message() used inside functions. function prevent printing print() used inside instruction tested. prevent , use tempo <- utils::capture.output(error <- get_message(data = \"arg_check(data = '', class = mean, neg.values = FALSE, print = TRUE)\")). return get_message() assigned error printed messages captured utils::capture.output() assigned tempo. See examples.","code":""},{"path":"/reference/get_message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_message — get_message","text":"","code":"get_message(data = \"wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)\", kind = \"error\",  print.no = TRUE, text = \"IN A\") #> [1] \"NO ERROR MESSAGE REPORTED IN A\"  get_message(data = \"wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)\", kind = \"warning\",  print.no = TRUE, text = \"IN A\") #> [1] \"WARNING MESSAGE REPORTED IN A:\\nsimpleWarning in wilcox.test.default(c(1, 1, 3), c(1, 2, 4), paired = TRUE): cannot compute exact p-value with zeroes\\n\"  get_message(data = \"wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)\", kind = \"message\",  print.no = TRUE, text = \"IN A\") #> [1] \"NO STANDARD (NON ERROR AND NON WARNING) MESSAGE REPORTED IN A\"  get_message(data = \"wilcox.test()\", kind = \"error\", print.no = TRUE, text = \"IN A\") #> [1] \"ERROR MESSAGE REPORTED IN A:\\nIn wilcox.test.default() : argument \\\"x\\\" is missing, with no default\\n\"  get_message(data = \"sum(1)\", kind = \"error\", print.no = TRUE, text = \"IN A\") #> [1] \"NO ERROR MESSAGE REPORTED IN A\"  get_message(data = \"message('ahah')\", kind = \"error\", print.no = TRUE, text = \"IN A\") #> [1] \"NO ERROR MESSAGE REPORTED IN A\"  get_message(data = \"message('ahah')\", kind = \"message\", print.no = TRUE, text = \"IN A\") #> ahah #> [1] \"NO STANDARD (NON ERROR AND NON WARNING) MESSAGE REPORTED IN A\"  get_message(data = \"ggplot(data = data.frame(X = 1:10, stringsAsFactors = TRUE),  mapping = aes(x = X)) + geom_histogram()\", kind = \"message\", print.no = TRUE,  text = \"IN FUNCTION 1\") #> [1] \"NO STANDARD (NON ERROR AND NON WARNING) MESSAGE BECAUSE OF ERROR MESSAGE REPORTED IN FUNCTION 1\"  set.seed(1) ;  obs1 <- data.frame(Time = c(rnorm(10), rnorm(10) + 2),  Group1 = rep(c(\"G\", \"H\"), each = 10), stringsAsFactors = TRUE) ;  get_message(data = 'gg_boxplot(data = obs1, y = \"Time\", categ = \"Group1\")',  kind = \"message\", print.no = TRUE, text = \"IN FUNCTION 1\") #> [1] \"NO STANDARD (NON ERROR AND NON WARNING) MESSAGE BECAUSE OF ERROR MESSAGE REPORTED IN FUNCTION 1\""},{"path":"/reference/internal_function.html","id":null,"dir":"Reference","previous_headings":"","what":".pack_and_function_check — .pack_and_function_check","title":".pack_and_function_check — .pack_and_function_check","text":"Check 1) required functions present required packages 2) required packages installed locally. Check critical operators R present packages global env.","code":""},{"path":"/reference/internal_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".pack_and_function_check — .pack_and_function_check","text":"","code":".pack_and_function_check(fun, lib.path, external.function.name)  .base_function_check(external.function.name)"},{"path":"/reference/internal_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".pack_and_function_check — .pack_and_function_check","text":"fun Character vector names required functions, preceded name package belong double colon. Example: c(\"ggplot2::geom_point\", \"grid::gpar\"). lib.path Character vector specifying absolute pathways directories containing listed packages fun argument, default directories. NULL, function checks .libPaths() default R library folders. external.function.name Name function using .pack_and_function_check() function.","code":""},{"path":"/reference/internal_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".pack_and_function_check — .pack_and_function_check","text":"error message least one checked packages missing lib.path, least one checked functions missing required package, nothing otherwise. error message least one checked operator present R scope, nothing otherwise.","code":""},{"path":"/reference/internal_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":".pack_and_function_check — .pack_and_function_check","text":"","code":"# .pack_and_function_check(fun = \"ggplot2::notgood\", lib.path = .libPaths(), external.function.name = \"fun1\") # commented because this example returns an error if (FALSE) { # Example that shouldn't be run because this is an internal function .pack_and_function_check(fun = c(\"ggplot2::geom_point\", \"grid::gpar\"), lib.path = .libPaths(), external.function.name = \"fun1\") } if (FALSE) { # Example that shouldn't be run because this is an internal function .base_function_check(external.function.name = \"fun1\") # commented because this example returns an error }"},{"path":"/reference/is_function_here.html","id":null,"dir":"Reference","previous_headings":"","what":"is_function_here — is_function_here","title":"is_function_here — is_function_here","text":"Check required functions present installed packages. controls modifications function names package versions.","code":""},{"path":"/reference/is_function_here.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is_function_here — is_function_here","text":"","code":"is_function_here(fun, lib.path = NULL)"},{"path":"/reference/is_function_here.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is_function_here — is_function_here","text":"fun Character vector names required functions, preceded name package belong double colon. Example: c(\"ggplot2::geom_point\", \"grid::gpar\"). Warning: write \"()\" end function lib.path Character vector specifying absolute pathways directories containing listed packages fun argument, default directories. Ignored NULL.","code":""},{"path":"/reference/is_function_here.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is_function_here — is_function_here","text":"error message least one checked packages missing lib.path, least one checked functions missing required package, nothing otherwise.","code":""},{"path":"/reference/is_function_here.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"is_function_here — is_function_here","text":"","code":"# is_function_here(fun = \"ggplot2::notgood\") # commented because this example returns an error is_function_here(fun = c(\"ggplot2::geom_point\", \"grid::gpar\"))"},{"path":"/reference/is_package_here.html","id":null,"dir":"Reference","previous_headings":"","what":"is_package_here — is_package_here","title":"is_package_here — is_package_here","text":"Check required packages installed locally.","code":""},{"path":"/reference/is_package_here.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is_package_here — is_package_here","text":"","code":"is_package_here(req.package, lib.path = NULL)"},{"path":"/reference/is_package_here.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is_package_here — is_package_here","text":"req.package Character vector package names check. lib.path Character vector specifying absolute pathways directories containing listed packages req.package argument, default directories. NULL, function checks .libPaths() default R library folders.","code":""},{"path":"/reference/is_package_here.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is_package_here — is_package_here","text":"error message least one checked packages missing lib.path, nothing otherwise.","code":""},{"path":"/reference/is_package_here.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"is_package_here — is_package_here","text":"","code":"# is_package_here(req.package = \"nopackage\") # commented because this example returns an error is_package_here(req.package = \"ggplot2\")  # is_package_here(req.package = \"ggplot2\", lib.path = \"C:/Users/yhan/AppData/Local/R/win-library/4.3\")  # commented because this example returns an error if the lib.path argument is not an existing directory"},{"path":"/reference/is_python_package_here.html","id":null,"dir":"Reference","previous_headings":"","what":"is_python_package_here — is_python_package_here","title":"is_python_package_here — is_python_package_here","text":"Check specified python packages installed locally.","code":""},{"path":"/reference/is_python_package_here.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is_python_package_here — is_python_package_here","text":"","code":"is_python_package_here(   req.package,   python.exec.path = NULL,   python.lib.path = NULL,   lib.path = NULL )"},{"path":"/reference/is_python_package_here.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is_python_package_here — is_python_package_here","text":"req.package Character vector package names import. python.exec.path Single optional character vector specifying absolute pathways executable python file use (associated packages use). NULL, reticulate::import_from_path() function used is_python_package_here() seeks available version python.exe, uses python_config(python_version, required_module, python_versions). might correct one python.lib.path parameter specified. Thus, recommanded leave NULL, notably using computing clusters. python.lib.path Optional character vector specifying absolute pathways directories containing listed packages req.package argument, default directories. lib.path Absolute path reticulate packages, default folders.","code":""},{"path":"/reference/is_python_package_here.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is_python_package_here — is_python_package_here","text":"error message least one checked packages missing python.lib.path, nothing otherwise.","code":""},{"path":"/reference/is_python_package_here.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"is_python_package_here — is_python_package_here","text":"WARNINGS python 3.7. Previous versions return error \"Error sys$stdout$flush() : attempt apply non-function\"","code":""},{"path":"/reference/is_python_package_here.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"is_python_package_here — is_python_package_here","text":"","code":"# example of error message  # is_python_package_here(req.package = \"nopackage\")   # commented because this example returns an error if the python package is not installed on the computer # (require the installation of the python serpentine package  # from https://github.com/koszullab/serpentine  # is_python_package_here(req.package = \"serpentine\")   # another example of error message  # is_python_package_here(req.package = \"serpentine\", python.lib.path = \"blablabla\")"},{"path":"/reference/python_pkg_check.html","id":null,"dir":"Reference","previous_headings":"","what":"python_pkg_check — python_pkg_check","title":"python_pkg_check — python_pkg_check","text":"Check specified python packages present computer (import).","code":""},{"path":"/reference/python_pkg_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"python_pkg_check — python_pkg_check","text":"","code":"python_pkg_check(   req.package,   python.exec.path = NULL,   python.lib.path = NULL,   lib.path = NULL )"},{"path":"/reference/python_pkg_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"python_pkg_check — python_pkg_check","text":"req.package Character vector package names import. python.exec.path Single optional character vector specifying absolute pathways executable python file use (associated packages use). NULL, reticulate::import_from_path() function used python_pkg_check() seeks available version python.exe, uses python_config(python_version, required_module, python_versions). might correct one python.lib.path parameter specified. Thus, recommanded leave NULL, notably using computing clusters. python.lib.path Optional character vector specifying absolute pathways directories containing listed packages req.package argument, default directories. lib.path Absolute path reticulate packages, default folders.","code":""},{"path":"/reference/python_pkg_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"python_pkg_check — python_pkg_check","text":"Nothing.","code":""},{"path":"/reference/python_pkg_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"python_pkg_check — python_pkg_check","text":"REQUIRED PACKAGES reticulate REQUIRED FUNCTIONS CUTE_LITTLE_R_FUNCTION arg_check() WARNINGS python 3.7. Previous versions return error \"Error sys$stdout$flush() : attempt apply non-function\"","code":""},{"path":"/reference/python_pkg_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"python_pkg_check — python_pkg_check","text":"","code":"# example of error message  # python_pkg_check(req.package = \"nopackage\")   # commented because this example returns an error if the python package is not installed on the computer # (require the installation of the python serpentine package  # from https://github.com/koszullab/serpentine  # python_pkg_check(req.package = \"serpentine\")   # another example of error message  # python_pkg_check(req.package = \"serpentine\", python.lib.path = \"blablabla\")"},{"path":"/reference/report.html","id":null,"dir":"Reference","previous_headings":"","what":"report — report","title":"report — report","text":"Log file function: print character string data object output file.","code":""},{"path":"/reference/report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"report — report","text":"","code":"report(   data,   output = \"results.txt\",   path,   overwrite = FALSE,   rownames.kept = FALSE,   vector.cat = FALSE,   noquote = TRUE,   sep = 2 )"},{"path":"/reference/report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"report — report","text":"data Object print output file. NULL, nothing done, warning. output Single character string. Name output file. path Location output file. overwrite Single logical value. output file already exists, defines printing appended (default FALSE) output file content erased printing (TRUE). rownames.kept Single logical value. Defines whether row names removed small tables (less length.rows rows). vector.cat Single logical value. TRUE print vector length > 1 using cat() instead capture.output(). Otherwise (default FALSE) opposite. noquote Single logical value. TRUE quote present characters. sep Single integer representing number empty lines printed data.","code":""},{"path":"/reference/report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"report — report","text":"Nothing.","code":""},{"path":"/reference/report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"report — report","text":"","code":"#report() report(data = 1:3, output = \"results.txt\", path = \".\", overwrite = TRUE,  rownames.kept = FALSE, vector.cat = FALSE, noquote = FALSE, sep = 2)"}]
