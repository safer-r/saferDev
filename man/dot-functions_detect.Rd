% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/intern_.functions_detect.R
\name{.functions_detect}
\alias{.functions_detect}
\title{.functions_detect}
\usage{
.functions_detect(x, skipped_base, arg_user_setting2, lib_path, error_text)
}
\arguments{
\item{x}{Function name, written without quotes and brackets.}

\item{skipped_base}{Vector of strings specifying the basic functions skipped from detection.}

\item{arg_user_setting2}{Argument user settings list.}

\item{lib_path}{Vector of characters specifying the absolute pathways of the directories containing the required packages for the function, if not in the default directories. Useful when R package are not installed in the default directories because of lack of admin rights.  More precisely, lib_path is passed through the new argument of .libPaths() so that the new library paths are unique(c(new, .Library.site, .Library)). Warning: .libPaths() is restored to the initial paths, after function execution. Ignored if NULL (default) or if the safer_check argument is FALSE: only the pathways specified by the current .libPaths() are used for package calling.}

\item{error_text}{Single character string used to add information in error messages returned by the function, notably if the function is inside other functions, which is practical for debugging. Example: error_text = " INSIDE <PACKAGE_1>::<FUNCTION_1> INSIDE <PACKAGE_2>::<FUNCTION_2>.". If NULL, converted into "".}
}
\value{
A list:
$code: vector of strings of the code of the tested function.
$all_basic_funs: vector or strings of names of all the basic R functions.
$fun_names: list of names of all the functions, not considering base::c("function", "if", "for", "while", "repeat"). Compartment names indicate the code line number of the functions in $code.
$fun_names_pos: list of position of the first character of each $fun_names. Compartment names indicate the code line number of the functions in $code.
$code_line_nb: vector of integers of the code line numbers of code for each non empty compartment of $fun_names and $fun_names_pos.
$internal_fun_names: vector of string of names of internal functions in the code of the tested function.
$arg_user_setting: list of arg user settings of the tested function.
}
\description{
Detect all the functions names used inside a function.
}
\details{
- Does not check if the functions inside the code exist.
- Use the regex pattern "([a-zA-Z]|\\.[a-zA-Z._])[a-zA-Z0-9._]*\\s*\\(" to detect a function in the code.
- $all_basic_funs are all the functions in base::c("package:stats", "package:graphics",  "package:grDevices", "package:utils", "package:datasets", "package:methods", "Autoloads", "package:base")
- Warning: requires saferDev::arg_check, saferDev:::.extract_all_fun_names, saferDev:::.has_odd_number_of_quotes. In main safer functions, in the section "######## check of the required functions from the required packages" add these functions when checking for the presence of saferDev:::.functions_detect.
}
\examples{
\dontrun{ # Example that shouldn't be run because this is an internal function
source("C:\\\\Users\\\\gmillot\\\\Documents\\\\Git_projects\\\\safer-r\\\\saferDev\\\\dev\\\\other\\\\test.R") ; .functions_detect(x = test, arg_user_setting = base::list(x =  as.name(x = "test")), lib_path = NULL, error_text = " INSIDE P1::F1")
}
}
\author{
Gael Millot <gael.millot@pasteur.fr>

# importFrom none
}
\keyword{internal}
