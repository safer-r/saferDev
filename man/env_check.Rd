% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/env_check.R
\name{env_check}
\alias{env_check}
\title{env_check}
\usage{
env_check(pos = 1, name = NULL, safer_check = TRUE)
}
\arguments{
\item{pos}{Single non nul positive integer indicating the position of the environment checked (argument n of the parent.frame() function). Value 1 means one step above the env_check() local environment (by default). This means that when env_check(pos = 1) is used inside a function A, it checks if the name of any object in the local environment of this function A is also present in above environments, following R Scope, starting by the just above environment. When env_check(pos = 1) is used in the working (Global) environment (named .GlobalEnv), it checks the object names of this .GlobalEnv environment, in the above environments. See the examples below.}

\item{name}{Single character string indicating a string that will be added in the output string, for instance the name of a function inside which env_check() is used.}

\item{safer_check}{Single logical value. Perform some "safer" checks (see https://github.com/safer-r)? If TRUE, checkings are performed before main code running: 1) R classical operators (like "<-") not overwritten by another package because of the R scope and 2) required functions and related packages effectively present in local R lybraries. Set to FALSE if this fonction is used inside another "safer" function to avoid pointless multiple checkings.}
}
\value{
A character string indicating the object names of the tested environment that match object names in the above environments, following the R scope, or NULL if no match.
}
\description{
Verify that object names in the environment defined by the pos parameter are identical or not to object names in the above environments (following R Scope). This can be used to verify that names used for objects inside a function or in the working environment do not override names of objects already present in the above R environments, following the R scope.
}
\examples{
# Example in the working environment

mean <- 1 
# creation of the object mean with value 1 in the .GlobalEnv environment, 
# knowing that the mean() function also exists in the environment base, above .GlobalEnv.
t.test <- 1 
# creation of the object t.test with value 1 in the .GlobalEnv environment, 
# knowing that the t.test() function also exists in the environment stats, above .GlobalEnv.
search() 
# current R scope (order of the successive R environments).
utils::find("mean") 
# where the objects with the name "mean" are present.
utils::find("t.test") 
# where the objects with the name "mean" are present.
a <- env_check(pos = 1) 
# test if any object name of the global environment are above environments 
# (or env_check(), as pos = 1 is the default value).
a # the output string of sec().
cat(a) # the evaluated output.
env_check(pos = 2) 
# test if any object of the stats environment (one step above .GlobalEnv) 
# are above environments. Returns NULL since no object names of stats are in above environments


# Example inside a function

fun1 <- function(){t.test <- 0 ; mean <- 5 ; env_check(pos = 1)} 
# env_check() will check if the object names inside the fun1 function 
# exist in the .GlobalEnv environment and above.
fun1()
fun2 <- function(){t.test <- 0 ; mean <- 5 ; env_check(pos = 2)} 
# env_check() will check if the object names inside the fun2 function 
# exist in the stats environment and above.
fun2()
fun3 <- function(){t.test <- 0 ; mean <- 5 ; env_check(pos = 2, name = "fun3")} 
# idem fun2() but with the name of the function fun2 indicated. 
# Instead of writting name = "fun3", 
# we can also use name = as.character(sys.calls()[[length(sys.calls())]]), 
# as sys.calls() gives the function name at top stack of the imbricated functions, 
# sys.calls()[[length(sys.calls())]] the name of the just above function. 
# This can also been used for the above function: as.character(sys.call(1))
fun3()
test.pos <- 1
env_check(pos = test.pos, 
name = if(length(sys.calls()) >= test.pos)
{as.character(sys.calls()[[length(sys.calls()) + 1 - test.pos]])}
else{search()[ (1:length(search()))[test.pos - length(sys.calls())]]}) 
# here is a way to have the name of the tested environment according to test.pos value
}
\seealso{
\code{\link{exists}} .
}
\author{
Gael Millot <gael.millot@pasteur.fr>

Yushi Han <yushi.han2000@gmail.com>

Haiding Wang <wanghaiding442@gmail.com>
}
