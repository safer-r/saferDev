% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/intern_.colons_check_message.R
\name{.colons_check_message}
\alias{.colons_check_message}
\title{.colons_check_message}
\usage{
.colons_check_message(
  list_fun,
  list_fun_pos,
  line_nb,
  ini,
  arg_user_setting2,
  text,
  internal_fun_names,
  lib_path,
  error_text
)
}
\arguments{
\item{list_fun}{List of names of all the functions.}

\item{list_fun_pos}{List of positions of first character of names of all the functions in ini.}

\item{line_nb}{Vector of integers of corresponding line numbers.}

\item{ini}{Vector of strings of the initial function code analyzed.}

\item{arg_user_setting2}{List of arg user settings.}

\item{text}{Either "BASIC" or "OTHER".}

\item{internal_fun_names}{Vector of strings of names of internal functions in the function code analyzed. Can be NULL.}

\item{lib_path}{Vector of characters specifying the absolute pathways of the directories containing the required packages for the function, if not in the default directories. Useful when R package are not installed in the default directories because of lack of admin rights.  More precisely, lib_path is passed through the new argument of .libPaths() so that the new library paths are unique(c(new, .Library.site, .Library)). Warning: .libPaths() is restored to the initial paths, after function execution. Ignored if NULL (default) or if the safer_check argument is FALSE: only the pathways specified by the current .libPaths() are used for package calling.}

\item{error_text}{Single character string used to add information in error messages returned by the function, notably if the function is inside other functions, which is practical for debugging. Example: error_text = " INSIDE <PACKAGE_1>::<FUNCTION_1> INSIDE <PACKAGE_2>::<FUNCTION_2>.". If NULL, converted into "".}
}
\value{
A list:
 $output.cat: the message (string).
 $colon_not_here: logical vector. Does list_fun contain function names without :: or ::: ?
}
\description{
Create the message for the colons_check() function.
}
\details{
- Warning: requires saferDev::arg_check, saferDev:::.noclean_functions. In main safer functions, in the section "######## check of the required functions from the required packages" add these functions when checking for the presence of saferDev:::.colons_check_message.
}
\examples{
\dontrun{ # Example that shouldn't be run because this is an internal function (not found by devtools::check())
.colons_check_message(list_fun = list(c2 = "UseMethod"), list_fun_pos = list(c2 = 1), line_nb = 2, ini = c("function (x, ...) ", "UseMethod(\"mean\")", "<bytecode: 0x000001969e09e580>", "<environment: namespace:base>"), arg_user_setting2 = list(x = x, arg_user_setting2 = arg_user_setting, error_text = "P1::F1"), text = "BASIC", internal_fun_names = NULL, lib_path = NULL, error_text = " INSIDE P1::F1")
}
}
\author{
Gael Millot <gael.millot@pasteur.fr>

# importFrom none
}
\keyword{internal}
