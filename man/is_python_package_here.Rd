% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/is_python_package_here.R
\name{is_python_package_here}
\alias{is_python_package_here}
\title{is_python_package_here}
\usage{
is_python_package_here(
  req_package,
  python_exec_path = NULL,
  python_lib_path = NULL,
  safer_check = TRUE,
  lib_path = NULL,
  error_text = ""
)
}
\arguments{
\item{req_package}{Character vector of package names to import.}

\item{python_exec_path}{Single optional character vector specifying the absolute pathways of the executable python file to use (associated to the packages to use). If NULL, the reticulate::import_from_path() function used in is_python_package_here() seeks for an available version of python.exe, and then uses python_config(python_version, required_module, python_versions). But might not be the correct one for the python_lib_path parameter specified. Thus, it is recommanded to do not leave NULL, notably when using computing clusters.}

\item{python_lib_path}{Optional character vector specifying the absolute pathways of the directories containing some of the listed packages in the req_package argument, if not in the default directories.}

\item{safer_check}{Single logical value. Perform some "safer" checks? If TRUE, checkings are performed before main code running (see https://github.com/safer-r): 1) correct lib_path argument value 2) required functions and related packages effectively present in local R lybraries and 3) R classical operators (like "<-") not overwritten by another package because of the R scope. Must be set to FALSE if this fonction is used inside another "safer" function to avoid pointless multiple checkings.}

\item{lib_path}{Vector of characters specifying the absolute pathways of the directories containing the required packages for the function, if not in the default directories. Useful when R package are not installed in the default directories because of lack of admin rights.  More precisely, lib_path is passed through the new argument of .libPaths() so that the new library paths are unique(c(new, .Library.site, .Library)). Warning: .libPaths() is restored to the initial paths, after function execution. Ignored if NULL (default) or if the safer_check argument is FALSE: only the pathways specified by the current .libPaths() are used for package calling.}

\item{error_text}{Single character string used to add information in error messages returned by the function, notably if the function is inside other functions, which is practical for debugging. Example: error_text = " INSIDE <PACKAGE_1>::<FUNCTION_1> INSIDE <PACKAGE_2>::<FUNCTION_2>.". If NULL, converted into "".}
}
\value{
An error message if at least one of the checked packages is missing in python_lib_path, nothing otherwise.
}
\description{
Check if the specified python packages are installed locally.
}
\details{
WARNINGS

for python 3.7. Previous versions return an error "Error in sys$stdout$flush() : attempt to apply non-function"
}
\examples{
\dontrun{ # Example that return an error
is_python_package_here(req_package = "nopackage")
# this example returns an error if the python package is not installed on the computer
# (require the installation of the python serpentine package 
# from https://github.com/koszullab/serpentine
is_python_package_here(req_package = "serpentine")
is_python_package_here(req_package = "serpentine", python_lib_path = "blablabla")
}
}
\author{
Gael Millot <gael.millot@pasteur.fr>

Yushi Han <yushi.han2000@gmail.com>

Haiding Wang <wanghaiding442@gmail.com>
}
