% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_message.R
\name{get_message}
\alias{get_message}
\title{get_message}
\usage{
get_message(
  data,
  kind = "error",
  header = TRUE,
  print.no = FALSE,
  text = NULL,
  env = NULL,
  lib_path = NULL,
  safer_check = TRUE,
  error_text = ""
)
}
\arguments{
\item{data}{Single character string to evaluate.}

\item{kind}{Single character string. Either "error" to get error messages, or "warning" to get warning messages, or "message" to get non error and non warning messages.}

\item{header}{Single logical value. Add a header in the returned message?}

\item{print.no}{Single logical value. Print a message saying that no message reported?}

\item{text}{Single character string added to the output message (even if no message exists and print.no is TRUE). Inactivated if the header argument is FALSE. Write NULL if not required.}

\item{env}{The name of an existing environment. Write NULL if not required.}

\item{lib_path}{Vector of characters specifying the absolute pathways of the directories containing the required packages for the function, if not in the default directories. Useful to overcome R execution using system with non admin rights for R package installation in the default directories. Ignored if NULL (default): only the pathways specified by .libPaths() are used for package calling. Specify the right path if the function returns a package path error.}

\item{safer_check}{Single logical value. Perform some "safer" checks? If TRUE, checkings are performed before main code running (see https://github.com/safer-r): 1) R classical operators (like "<-") not overwritten by another package because of the R scope and 2) required functions and related packages effectively present in local R lybraries. Must be set to FALSE if this fonction is used inside another "safer" function to avoid pointless multiple checkings.}

\item{error_text}{Single character string used to add information in error messages returned by the function, notably if the function is inside other functions, which is practical for debugging. Example: error_text = "INSIDE <PACKAGE_1>::<FUNCTION_1> INSIDE <PACKAGE_2>::<FUNCTION_2>".}
}
\value{
The message or NULL if no message and print.no is FALSE.
}
\description{
Evaluate an instruction written between "" and return the first of the error, or warning or standard (non error non warning) messages if ever exist.

Using argument print.no = FALSE, return NULL if no message, which is convenient in some cases.
}
\details{
WARNINGS

Only the first standard/error/warning message is returned.

Always use the env argument when get_message() is used inside functions.

The function does not prevent printing if print() is used inside the instruction tested. To prevent that, use tempo <- utils::capture.output(error <- get_message(data = "arg_check(data = 'a', class = mean, neg_values = FALSE, print = TRUE)")). The return of get_message() is assigned into error and the printed messages are captured by utils::capture.output() and assigned into tempo. See the examples.
}
\examples{
get_message(data = "wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)", kind = "error", print.no = TRUE, text = "IN A")

get_message(data = "wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)", kind = "warning", 
print.no = TRUE, text = "IN A")

get_message(data = "wilcox.test(c(1,1,3), c(1, 2, 4), paired = TRUE)", kind = "message", 
print.no = TRUE, text = "IN A")

get_message(data = "wilcox.test()", kind = "message", print.no = TRUE, text = "IN A")
get_message(data = "wilcox.test()", kind = "error", print.no = TRUE, text = "IN A")

get_message(data = "sum(1)", kind = "error", print.no = TRUE, text = "IN A")

get_message(data = "message('ahah')", kind = "error", print.no = TRUE, text = "IN A")

get_message(data = "message('ahah')", kind = "message", print.no = TRUE, text = "IN A")

get_message(data = "ggplot2::ggplot(data = data.frame(X = 1:10, stringsAsFactors = TRUE), 
mapping = ggplot2::aes(x = X)) + ggplot2::geom_histogram()", kind = "message", print.no = TRUE, 
text = "IN INSTRUCTION 1")

set.seed(1) ; 
obs1 <- data.frame(Time = c(rnorm(10), rnorm(10) + 2), 
Group1 = rep(c("G", "H"), each = 10), stringsAsFactors = TRUE) ; 
get_message(data = 'gg_boxplot(data = obs1, y = "Time", categ = "Group1")', 
kind = "message", print.no = TRUE, text = "IN INSTRUCTION 1")
}
\seealso{
\code{\link{try}}.
}
\author{
Gael Millot <gael.millot@pasteur.fr>

Yushi Han <yushi.han2000@gmail.com>

Haiding Wang <wanghaiding442@gmail.com>
}
